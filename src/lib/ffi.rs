#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
/* automatically generated by rust-bindgen */

pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __intptr_t = ::libc::c_int;
pub type __uintptr_t = ::libc::c_uint;
pub type int8_t = __int8_t;
pub type uint8_t = __uint8_t;
pub type int_least8_t = __int_least8_t;
pub type uint_least8_t = __uint_least8_t;
pub type int16_t = __int16_t;
pub type uint16_t = __uint16_t;
pub type int_least16_t = __int_least16_t;
pub type uint_least16_t = __uint_least16_t;
pub type int32_t = __int32_t;
pub type uint32_t = __uint32_t;
pub type int_least32_t = __int_least32_t;
pub type uint_least32_t = __uint_least32_t;
pub type int64_t = __int64_t;
pub type uint64_t = __uint64_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::libc::c_int;
pub type uint_fast8_t = ::libc::c_uint;
pub type int_fast16_t = ::libc::c_int;
pub type uint_fast16_t = ::libc::c_uint;
pub type int_fast32_t = ::libc::c_int;
pub type uint_fast32_t = ::libc::c_uint;
pub type int_fast64_t = int_least64_t;
pub type uint_fast64_t = uint_least64_t;
pub type intmax_t = ::libc::c_longlong;
pub type uintmax_t = ::libc::c_ulonglong;
pub type intptr_t = __intptr_t;
pub type uintptr_t = __uintptr_t;
pub type PPB_GetInterface = extern "C" fn(arg1: *const ::libc::c_char)
                                          -> *const ::libc::c_void;
pub type PP_Module = int32_t;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Module {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Module_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_InitializeModule_Func =
    ::std::option::Option<extern "C" fn
                              (arg1: PP_Module, arg2: PPB_GetInterface)
                              -> int32_t>;
pub type PP_ShutdownModule_Func = ::std::option::Option<extern "C" fn()>;
pub type PP_GetInterface_Func =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_char)
                              -> *const ::libc::c_void>;
pub type PP_Bool = ::libc::c_uint;
pub const PP_FALSE: ::libc::c_uint = 0;
pub const PP_TRUE: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Bool {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Bool_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_Instance = int32_t;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Instance {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Instance_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_Resource = int32_t;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Resource {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Resource_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_Time = ::libc::c_double;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Time {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Time_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TimeTicks = ::libc::c_double;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TimeTicks {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TimeTicks_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TimeDelta = ::libc::c_double;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TimeDelta {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TimeDelta_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
pub type PPB_Audio_Callback =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: uint32_t,
                               arg3: PP_TimeDelta,
                               arg4: *mut ::libc::c_void)>;
pub type PPB_Audio_Callback_1_0 =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: uint32_t,
                               arg3: *mut ::libc::c_void)>;
#[repr(C)]
pub struct Struct_PPB_Audio_1_1 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_Resource,
                                           arg3: PPB_Audio_Callback,
                                           arg4: *mut ::libc::c_void)
                                          -> PP_Resource>,
    pub IsAudio: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> PP_Bool>,
    pub GetCurrentConfig: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Resource>,
    pub StartPlayback: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub StopPlayback: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
}
pub type PPB_Audio = Struct_PPB_Audio_1_1;
#[repr(C)]
pub struct Struct_PPB_Audio_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_Resource,
                                           arg3: PPB_Audio_Callback_1_0,
                                           arg4: *mut ::libc::c_void)
                                          -> PP_Resource>,
    pub IsAudio: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> PP_Bool>,
    pub GetCurrentConfig: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Resource>,
    pub StartPlayback: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub StopPlayback: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
}
pub type PP_AudioBuffer_SampleRate = ::libc::c_uint;
pub const PP_AUDIOBUFFER_SAMPLERATE_UNKNOWN: ::libc::c_uint = 0;
pub const PP_AUDIOBUFFER_SAMPLERATE_8000: ::libc::c_uint = 8000;
pub const PP_AUDIOBUFFER_SAMPLERATE_16000: ::libc::c_uint = 16000;
pub const PP_AUDIOBUFFER_SAMPLERATE_22050: ::libc::c_uint = 22050;
pub const PP_AUDIOBUFFER_SAMPLERATE_32000: ::libc::c_uint = 32000;
pub const PP_AUDIOBUFFER_SAMPLERATE_44100: ::libc::c_uint = 44100;
pub const PP_AUDIOBUFFER_SAMPLERATE_48000: ::libc::c_uint = 48000;
pub const PP_AUDIOBUFFER_SAMPLERATE_96000: ::libc::c_uint = 96000;
pub const PP_AUDIOBUFFER_SAMPLERATE_192000: ::libc::c_uint = 192000;
pub type PP_AudioBuffer_SampleSize = ::libc::c_uint;
pub const PP_AUDIOBUFFER_SAMPLESIZE_UNKNOWN: ::libc::c_uint = 0;
pub const PP_AUDIOBUFFER_SAMPLESIZE_16_BITS: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PPB_AudioBuffer_0_1 {
    pub IsAudioBuffer: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetTimestamp: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_TimeDelta>,
    pub SetTimestamp: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: PP_TimeDelta)>,
    pub GetSampleRate: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 ->
                                                     PP_AudioBuffer_SampleRate>,
    pub GetSampleSize: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 ->
                                                     PP_AudioBuffer_SampleSize>,
    pub GetNumberOfChannels: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource)
                                                       -> uint32_t>,
    pub GetNumberOfSamples: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource)
                                                      -> uint32_t>,
    pub GetDataBuffer: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> *mut ::libc::c_void>,
    pub GetDataBufferSize: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> uint32_t>,
}
pub type PPB_AudioBuffer = Struct_PPB_AudioBuffer_0_1;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const PP_AUDIOMINSAMPLEFRAMECOUNT: ::libc::c_uint = 64;
pub const PP_AUDIOMAXSAMPLEFRAMECOUNT: ::libc::c_uint = 32768;
pub type PP_AudioSampleRate = ::libc::c_uint;
pub const PP_AUDIOSAMPLERATE_NONE: ::libc::c_uint = 0;
pub const PP_AUDIOSAMPLERATE_44100: ::libc::c_uint = 44100;
pub const PP_AUDIOSAMPLERATE_48000: ::libc::c_uint = 48000;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_AudioSampleRate {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_AudioSampleRate_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_AudioConfig_1_1 {
    pub CreateStereo16Bit: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Instance,
                                                      arg2:
                                                          PP_AudioSampleRate,
                                                      arg3: uint32_t)
                                                     -> PP_Resource>,
    pub RecommendSampleFrameCount: ::std::option::Option<extern "C" fn
                                                             (arg1:
                                                                  PP_Instance,
                                                              arg2:
                                                                  PP_AudioSampleRate,
                                                              arg3: uint32_t)
                                                             -> uint32_t>,
    pub IsAudioConfig: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetSampleRate: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_AudioSampleRate>,
    pub GetSampleFrameCount: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource)
                                                       -> uint32_t>,
    pub RecommendSampleRate: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Instance)
                                                       -> PP_AudioSampleRate>,
}
pub type PPB_AudioConfig = Struct_PPB_AudioConfig_1_1;
#[repr(C)]
pub struct Struct_PPB_AudioConfig_1_0 {
    pub CreateStereo16Bit: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Instance,
                                                      arg2:
                                                          PP_AudioSampleRate,
                                                      arg3: uint32_t)
                                                     -> PP_Resource>,
    pub RecommendSampleFrameCount: ::std::option::Option<extern "C" fn
                                                             (arg1:
                                                                  PP_AudioSampleRate,
                                                              arg2: uint32_t)
                                                             -> uint32_t>,
    pub IsAudioConfig: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetSampleRate: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_AudioSampleRate>,
    pub GetSampleFrameCount: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource)
                                                       -> uint32_t>,
}
pub type PP_VarType = ::libc::c_uint;
pub const PP_VARTYPE_UNDEFINED: ::libc::c_uint = 0;
pub const PP_VARTYPE_NULL: ::libc::c_uint = 1;
pub const PP_VARTYPE_BOOL: ::libc::c_uint = 2;
pub const PP_VARTYPE_INT32: ::libc::c_uint = 3;
pub const PP_VARTYPE_DOUBLE: ::libc::c_uint = 4;
pub const PP_VARTYPE_STRING: ::libc::c_uint = 5;
pub const PP_VARTYPE_OBJECT: ::libc::c_uint = 6;
pub const PP_VARTYPE_ARRAY: ::libc::c_uint = 7;
pub const PP_VARTYPE_DICTIONARY: ::libc::c_uint = 8;
pub const PP_VARTYPE_ARRAY_BUFFER: ::libc::c_uint = 9;
pub const PP_VARTYPE_RESOURCE: ::libc::c_uint = 10;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_VarType {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_VarType_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Union_PP_VarValue {
    pub data: [u64, ..1u],
}
impl Union_PP_VarValue {
    pub fn as_bool(&mut self) -> *mut PP_Bool {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn as_int(&mut self) -> *mut int32_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn as_double(&mut self) -> *mut ::libc::c_double {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn as_id(&mut self) -> *mut int64_t {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_PP_Var {
    pub _type: PP_VarType,
    pub padding: int32_t,
    pub value: Union_PP_VarValue,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Var {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Var_is_not_16_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_LogLevel = ::libc::c_uint;
pub const PP_LOGLEVEL_TIP: ::libc::c_uint = 0;
pub const PP_LOGLEVEL_LOG: ::libc::c_uint = 1;
pub const PP_LOGLEVEL_WARNING: ::libc::c_uint = 2;
pub const PP_LOGLEVEL_ERROR: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_LogLevel {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_LogLevel_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_Console_1_0 {
    pub Log: ::std::option::Option<extern "C" fn
                                       (arg1: PP_Instance, arg2: PP_LogLevel,
                                        arg3: Struct_PP_Var)>,
    pub LogWithSource: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: PP_LogLevel,
                                                  arg3: Struct_PP_Var,
                                                  arg4: Struct_PP_Var)>,
}
pub type PPB_Console = Struct_PPB_Console_1_0;
pub type PP_CompletionCallback_Func = extern "C" fn
    (arg1: *mut ::libc::c_void, arg2: int32_t);
pub type PP_CompletionCallback_Flag = ::libc::c_uint;
pub const PP_COMPLETIONCALLBACK_FLAG_NONE: ::libc::c_uint = 0;
pub const PP_COMPLETIONCALLBACK_FLAG_OPTIONAL: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_CompletionCallback_Flag {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_CompletionCallback_Flag_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_CompletionCallback {
    pub func: PP_CompletionCallback_Func,
    pub user_data: *mut ::libc::c_void,
    pub flags: int32_t,
}
pub type ptrdiff_t = ::libc::c_int;
pub type size_t = ::libc::c_uint;
pub type __dev_t = int64_t;
pub type __ino_t = uint64_t;
pub type __mode_t = uint32_t;
pub type __nlink_t = uint32_t;
pub type __uid_t = uint32_t;
pub type __gid_t = uint32_t;
pub type _off_t = int64_t;
pub type _off64_t = int64_t;
pub type __blksize_t = int32_t;
pub type blksize_t = __blksize_t;
pub type __blkcnt_t = int32_t;
pub type blkcnt_t = __blkcnt_t;
pub type __time_t = int64_t;
pub type time_t = __time_t;
#[repr(C)]
pub struct Struct_timespec {
    pub tv_sec: time_t,
    pub tv_nsec: ::libc::c_long,
}
#[repr(C)]
pub struct Struct___local_pthread_mutex_t {
    pub spinlock: ::libc::c_int,
    pub mutex_type: ::libc::c_int,
    pub owner_thread_id: ::libc::c_int,
    pub recursion_counter: ::libc::c_int,
    pub mutex_handle: ::libc::c_int,
}
pub type _LOCK_T = Struct___local_pthread_mutex_t;
pub type _LOCK_RECURSIVE_T = _LOCK_T;
pub type _fpos_t = ::libc::c_long;
pub type _ssize_t = ::libc::c_int;
pub type wint_t = ::libc::c_int;
#[repr(C)]
pub struct Union_Unnamed2 {
    pub data: [u32, ..1u],
}
impl Union_Unnamed2 {
    pub fn __wch(&mut self) -> *mut wint_t {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn __wchb(&mut self) -> *mut [::libc::c_uchar, ..4u] {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct _mbstate_t {
    pub __count: ::libc::c_int,
    pub __value: Union_Unnamed2,
}
pub type _flock_t = _LOCK_RECURSIVE_T;
pub type _iconv_t = *mut ::libc::c_void;
pub type __ULong = ::libc::c_ulong;
#[repr(C)]
pub struct Struct__Bigint {
    pub _next: *mut Struct__Bigint,
    pub _k: ::libc::c_int,
    pub _maxwds: ::libc::c_int,
    pub _sign: ::libc::c_int,
    pub _wds: ::libc::c_int,
    pub _x: [__ULong, ..1u],
}
#[repr(C)]
pub struct Struct___tm {
    pub __tm_sec: ::libc::c_int,
    pub __tm_min: ::libc::c_int,
    pub __tm_hour: ::libc::c_int,
    pub __tm_mday: ::libc::c_int,
    pub __tm_mon: ::libc::c_int,
    pub __tm_year: ::libc::c_int,
    pub __tm_wday: ::libc::c_int,
    pub __tm_yday: ::libc::c_int,
    pub __tm_isdst: ::libc::c_int,
}
#[repr(C)]
pub struct Struct__on_exit_args {
    pub _fnargs: [*mut ::libc::c_void, ..32u],
    pub _dso_handle: [*mut ::libc::c_void, ..32u],
    pub _fntypes: __ULong,
    pub _is_cxa: __ULong,
}
#[repr(C)]
pub struct Struct__atexit {
    pub _next: *mut Struct__atexit,
    pub _ind: ::libc::c_int,
    pub _fns: [::std::option::Option<extern "C" fn()>, ..32u],
    pub _on_exit_args: Struct__on_exit_args,
}
#[repr(C)]
pub struct Struct___sbuf {
    pub _base: *mut ::libc::c_uchar,
    pub _size: ::libc::c_int,
}
#[repr(C)]
pub struct Struct___sFILE {
    pub _p: *mut ::libc::c_uchar,
    pub _r: ::libc::c_int,
    pub _w: ::libc::c_int,
    pub _flags: ::libc::c_short,
    pub _file: ::libc::c_short,
    pub _bf: Struct___sbuf,
    pub _lbfsize: ::libc::c_int,
    pub _cookie: *mut ::libc::c_void,
    pub _read: ::std::option::Option<extern "C" fn
                                         (arg1: *mut Struct__reent,
                                          arg2: *mut ::libc::c_void,
                                          arg3: *mut ::libc::c_char,
                                          arg4: ::libc::c_int)
                                         -> ::libc::c_int>,
    pub _write: ::std::option::Option<extern "C" fn
                                          (arg1: *mut Struct__reent,
                                           arg2: *mut ::libc::c_void,
                                           arg3: *const ::libc::c_char,
                                           arg4: ::libc::c_int)
                                          -> ::libc::c_int>,
    pub _seek: ::std::option::Option<extern "C" fn
                                         (arg1: *mut Struct__reent,
                                          arg2: *mut ::libc::c_void,
                                          arg3: _fpos_t, arg4: ::libc::c_int)
                                         -> _fpos_t>,
    pub _close: ::std::option::Option<extern "C" fn
                                          (arg1: *mut Struct__reent,
                                           arg2: *mut ::libc::c_void)
                                          -> ::libc::c_int>,
    pub _ub: Struct___sbuf,
    pub _up: *mut ::libc::c_uchar,
    pub _ur: ::libc::c_int,
    pub _ubuf: [::libc::c_uchar, ..3u],
    pub _nbuf: [::libc::c_uchar, ..1u],
    pub _lb: Struct___sbuf,
    pub _blksize: ::libc::c_int,
    pub _offset: _off_t,
    pub _data: *mut Struct__reent,
    pub _lock: _flock_t,
    pub _mbstate: _mbstate_t,
    pub _flags2: ::libc::c_int,
}
pub type __FILE = Struct___sFILE;
#[repr(C)]
pub struct Struct__glue {
    pub _next: *mut Struct__glue,
    pub _niobs: ::libc::c_int,
    pub _iobs: *mut __FILE,
}
#[repr(C)]
pub struct Struct__rand48 {
    pub _seed: [::libc::c_ushort, ..3u],
    pub _mult: [::libc::c_ushort, ..3u],
    pub _add: ::libc::c_ushort,
}
#[repr(C)]
pub struct Struct__reent {
    pub _errno: ::libc::c_int,
    pub _stdin: *mut __FILE,
    pub _stdout: *mut __FILE,
    pub _stderr: *mut __FILE,
    pub _inc: ::libc::c_int,
    pub _emergency: [::libc::c_char, ..25u],
    pub _current_category: ::libc::c_int,
    pub _current_locale: *const ::libc::c_char,
    pub __sdidinit: ::libc::c_int,
    pub __cleanup: ::std::option::Option<extern "C" fn
                                             (arg1: *mut Struct__reent)>,
    pub _result: *mut Struct__Bigint,
    pub _result_k: ::libc::c_int,
    pub _p5s: *mut Struct__Bigint,
    pub _freelist: *mut *mut Struct__Bigint,
    pub _cvtlen: ::libc::c_int,
    pub _cvtbuf: *mut ::libc::c_char,
    pub _new: Union_Unnamed3,
    pub _atexit: *mut Struct__atexit,
    pub _atexit0: Struct__atexit,
    pub _sig_func: ::libc::c_void,
    pub __sglue: Struct__glue,
    pub __sf: [__FILE, ..3u],
}
#[repr(C)]
pub struct Union_Unnamed3 {
    pub data: [u64, ..30u],
}
impl Union_Unnamed3 {
    pub fn _reent(&mut self) -> *mut Struct_Unnamed4 {
        unsafe { ::std::mem::transmute(self) }
    }
    pub fn _unused(&mut self) -> *mut Struct_Unnamed5 {
        unsafe { ::std::mem::transmute(self) }
    }
}
#[repr(C)]
pub struct Struct_Unnamed4 {
    pub _unused_rand: ::libc::c_uint,
    pub _strtok_last: *mut ::libc::c_char,
    pub _asctime_buf: [::libc::c_char, ..26u],
    pub _localtime_buf: Struct___tm,
    pub _gamma_signgam: ::libc::c_int,
    pub _rand_next: ::libc::c_ulonglong,
    pub _r48: Struct__rand48,
    pub _mblen_state: _mbstate_t,
    pub _mbtowc_state: _mbstate_t,
    pub _wctomb_state: _mbstate_t,
    pub _l64a_buf: [::libc::c_char, ..8u],
    pub _signal_buf: [::libc::c_char, ..24u],
    pub _getdate_err: ::libc::c_int,
    pub _mbrlen_state: _mbstate_t,
    pub _mbrtowc_state: _mbstate_t,
    pub _mbsrtowcs_state: _mbstate_t,
    pub _wcrtomb_state: _mbstate_t,
    pub _wcsrtombs_state: _mbstate_t,
    pub _h_errno: ::libc::c_int,
}
#[repr(C)]
pub struct Struct_Unnamed5 {
    pub _nextf: [*mut ::libc::c_uchar, ..30u],
    pub _nmalloc: [::libc::c_uint, ..30u],
}
#[repr(C)]
pub struct div_t {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
#[repr(C)]
pub struct ldiv_t {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
#[repr(C)]
pub struct lldiv_t {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_void,
                               arg2: *const ::libc::c_void) -> ::libc::c_int>;
#[repr(C)]
pub struct Struct_PPB_Core_1_0 {
    pub AddRefResource: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource)>,
    pub ReleaseResource: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)>,
    pub GetTime: ::std::option::Option<extern "C" fn() -> PP_Time>,
    pub GetTimeTicks: ::std::option::Option<extern "C" fn() -> PP_TimeTicks>,
    pub CallOnMainThread: ::std::option::Option<extern "C" fn
                                                    (arg1: int32_t,
                                                     arg2:
                                                         Struct_PP_CompletionCallback,
                                                     arg3: int32_t)>,
    pub IsMainThread: ::std::option::Option<extern "C" fn() -> PP_Bool>,
}
pub type PPB_Core = Struct_PPB_Core_1_0;
pub type PP_ArrayOutput_GetDataBuffer =
    ::std::option::Option<extern "C" fn
                              (arg1: *mut ::libc::c_void, arg2: uint32_t,
                               arg3: uint32_t) -> *mut ::libc::c_void>;
#[repr(C)]
pub struct Struct_PP_ArrayOutput {
    pub GetDataBuffer: PP_ArrayOutput_GetDataBuffer,
    pub user_data: *mut ::libc::c_void,
}
pub type PP_FileType = ::libc::c_uint;
pub const PP_FILETYPE_REGULAR: ::libc::c_uint = 0;
pub const PP_FILETYPE_DIRECTORY: ::libc::c_uint = 1;
pub const PP_FILETYPE_OTHER: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FileType {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FileType_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_FileSystemType = ::libc::c_uint;
pub const PP_FILESYSTEMTYPE_INVALID: ::libc::c_uint = 0;
pub const PP_FILESYSTEMTYPE_EXTERNAL: ::libc::c_uint = 1;
pub const PP_FILESYSTEMTYPE_LOCALPERSISTENT: ::libc::c_uint = 2;
pub const PP_FILESYSTEMTYPE_LOCALTEMPORARY: ::libc::c_uint = 3;
pub const PP_FILESYSTEMTYPE_ISOLATED: ::libc::c_uint = 4;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FileSystemType {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FileSystemType_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FileInfo {
    pub size: int64_t,
    pub _type: PP_FileType,
    pub system_type: PP_FileSystemType,
    pub creation_time: PP_Time,
    pub last_access_time: PP_Time,
    pub last_modified_time: PP_Time,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FileInfo {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FileInfo_is_not_40_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_FileOpenFlags = ::libc::c_uint;
pub const PP_FILEOPENFLAG_READ: ::libc::c_uint = 1;
pub const PP_FILEOPENFLAG_WRITE: ::libc::c_uint = 2;
pub const PP_FILEOPENFLAG_CREATE: ::libc::c_uint = 4;
pub const PP_FILEOPENFLAG_TRUNCATE: ::libc::c_uint = 8;
pub const PP_FILEOPENFLAG_EXCLUSIVE: ::libc::c_uint = 16;
pub const PP_FILEOPENFLAG_APPEND: ::libc::c_uint = 32;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FileOpenFlags {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FileOpenFlags_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_FileIO_1_1 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsFileIO: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> PP_Bool>,
    pub Open: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: PP_Resource,
                                         arg3: int32_t,
                                         arg4: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Query: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *mut Struct_PP_FileInfo,
                                          arg3: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Touch: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: PP_Time,
                                          arg3: PP_Time,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Read: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: int64_t,
                                         arg3: *mut ::libc::c_char,
                                         arg4: int32_t,
                                         arg5: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Write: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: int64_t,
                                          arg3: *const ::libc::c_char,
                                          arg4: int32_t,
                                          arg5: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub SetLength: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: int64_t,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub Flush: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub ReadToArray: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: int64_t, arg3: int32_t,
                                                arg4:
                                                    *mut Struct_PP_ArrayOutput,
                                                arg5:
                                                    Struct_PP_CompletionCallback)
                                               -> int32_t>,
}
pub type PPB_FileIO = Struct_PPB_FileIO_1_1;
#[repr(C)]
pub struct Struct_PPB_FileIO_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsFileIO: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> PP_Bool>,
    pub Open: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: PP_Resource,
                                         arg3: int32_t,
                                         arg4: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Query: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *mut Struct_PP_FileInfo,
                                          arg3: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Touch: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: PP_Time,
                                          arg3: PP_Time,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Read: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: int64_t,
                                         arg3: *mut ::libc::c_char,
                                         arg4: int32_t,
                                         arg5: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Write: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: int64_t,
                                          arg3: *const ::libc::c_char,
                                          arg4: int32_t,
                                          arg5: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub SetLength: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: int64_t,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub Flush: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
}
pub type PP_MakeDirectoryFlags = ::libc::c_uint;
pub const PP_MAKEDIRECTORYFLAG_NONE: ::libc::c_uint = 0;
pub const PP_MAKEDIRECTORYFLAG_WITH_ANCESTORS: ::libc::c_uint = 1;
pub const PP_MAKEDIRECTORYFLAG_EXCLUSIVE: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PPB_FileRef_1_2 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const ::libc::c_char)
                                          -> PP_Resource>,
    pub IsFileRef: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub GetFileSystemType: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_FileSystemType>,
    pub GetName: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetPath: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetParent: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Resource>,
    pub MakeDirectory: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: int32_t,
                                                  arg3:
                                                      Struct_PP_CompletionCallback)
                                                 -> int32_t>,
    pub Touch: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: PP_Time,
                                          arg3: PP_Time,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Delete: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Rename: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: PP_Resource,
                                           arg3: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Query: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *mut Struct_PP_FileInfo,
                                          arg3: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub ReadDirectoryEntries: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2:
                                                             Struct_PP_ArrayOutput,
                                                         arg3:
                                                             Struct_PP_CompletionCallback)
                                                        -> int32_t>,
}
pub type PPB_FileRef = Struct_PPB_FileRef_1_2;
#[repr(C)]
pub struct Struct_PPB_FileRef_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const ::libc::c_char)
                                          -> PP_Resource>,
    pub IsFileRef: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub GetFileSystemType: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_FileSystemType>,
    pub GetName: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetPath: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetParent: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Resource>,
    pub MakeDirectory: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: PP_Bool,
                                                  arg3:
                                                      Struct_PP_CompletionCallback)
                                                 -> int32_t>,
    pub Touch: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: PP_Time,
                                          arg3: PP_Time,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Delete: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Rename: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: PP_Resource,
                                           arg3: Struct_PP_CompletionCallback)
                                          -> int32_t>,
}
#[repr(C)]
pub struct Struct_PPB_FileRef_1_1 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const ::libc::c_char)
                                          -> PP_Resource>,
    pub IsFileRef: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub GetFileSystemType: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_FileSystemType>,
    pub GetName: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetPath: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetParent: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Resource>,
    pub MakeDirectory: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: PP_Bool,
                                                  arg3:
                                                      Struct_PP_CompletionCallback)
                                                 -> int32_t>,
    pub Touch: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: PP_Time,
                                          arg3: PP_Time,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Delete: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Rename: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: PP_Resource,
                                           arg3: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Query: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *mut Struct_PP_FileInfo,
                                          arg3: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub ReadDirectoryEntries: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2:
                                                             Struct_PP_ArrayOutput,
                                                         arg3:
                                                             Struct_PP_CompletionCallback)
                                                        -> int32_t>,
}
#[repr(C)]
pub struct Struct_PPB_FileSystem_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_FileSystemType)
                                          -> PP_Resource>,
    pub IsFileSystem: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub Open: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: int64_t,
                                         arg3: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub GetType: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> PP_FileSystemType>,
}
pub type PPB_FileSystem = Struct_PPB_FileSystem_1_0;
#[repr(C)]
pub struct Struct_PP_Size {
    pub width: int32_t,
    pub height: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Size {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Size_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FloatSize {
    pub width: ::libc::c_float,
    pub height: ::libc::c_float,
}
#[repr(C)]
pub struct Struct_PPB_Fullscreen_1_0 {
    pub IsFullscreen: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                                -> PP_Bool>,
    pub SetFullscreen: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: PP_Bool) -> PP_Bool>,
    pub GetScreenSize: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: *mut Struct_PP_Size)
                                                 -> PP_Bool>,
}
pub type PPB_Fullscreen = Struct_PPB_Fullscreen_1_0;
#[repr(C)]
pub struct Struct_PP_GamepadSampleData {
    pub axes_length: uint32_t,
    pub axes: [::libc::c_float, ..16u],
    pub buttons_length: uint32_t,
    pub buttons: [::libc::c_float, ..32u],
    pub timestamp: ::libc::c_double,
    pub id: [uint16_t, ..128u],
    pub connected: PP_Bool,
    pub unused_pad_: [::libc::c_char, ..4u],
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_GamepadSampleData {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_GamepadSampleData_is_not_472_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_GamepadsSampleData {
    pub length: uint32_t,
    pub unused_pad_: [::libc::c_char, ..4u],
    pub items: [Struct_PP_GamepadSampleData, ..4u],
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_GamepadsSampleData {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_GamepadsSampleData_is_not_1896_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_Gamepad_1_0 {
    pub Sample: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2:
                                               *mut Struct_PP_GamepadsSampleData)>,
}
pub type PPB_Gamepad = Struct_PPB_Gamepad_1_0;
#[repr(C)]
pub struct Struct_PP_Point {
    pub x: int32_t,
    pub y: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Point {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Point_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FloatPoint {
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FloatPoint {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FloatPoint_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_Rect {
    pub point: Struct_PP_Point,
    pub size: Struct_PP_Size,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Rect {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Rect_is_not_16_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FloatRect {
    pub point: Struct_PP_FloatPoint,
    pub size: Struct_PP_FloatSize,
}
#[repr(C)]
pub struct Struct_PPB_Graphics2D_1_1 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: *const Struct_PP_Size,
                                           arg3: PP_Bool) -> PP_Resource>,
    pub IsGraphics2D: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub Describe: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: *mut Struct_PP_Size,
                                             arg3: *mut PP_Bool) -> PP_Bool>,
    pub PaintImageData: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: PP_Resource,
                                                   arg3:
                                                       *const Struct_PP_Point,
                                                   arg4:
                                                       *const Struct_PP_Rect)>,
    pub Scroll: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const Struct_PP_Rect,
                                           arg3: *const Struct_PP_Point)>,
    pub ReplaceContents: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: PP_Resource)>,
    pub Flush: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub SetScale: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: ::libc::c_float)
                                            -> PP_Bool>,
    pub GetScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> ::libc::c_float>,
}
pub type PPB_Graphics2D = Struct_PPB_Graphics2D_1_1;
#[repr(C)]
pub struct Struct_PPB_Graphics2D_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: *const Struct_PP_Size,
                                           arg3: PP_Bool) -> PP_Resource>,
    pub IsGraphics2D: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub Describe: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: *mut Struct_PP_Size,
                                             arg3: *mut PP_Bool) -> PP_Bool>,
    pub PaintImageData: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: PP_Resource,
                                                   arg3:
                                                       *const Struct_PP_Point,
                                                   arg4:
                                                       *const Struct_PP_Rect)>,
    pub Scroll: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const Struct_PP_Rect,
                                           arg3: *const Struct_PP_Point)>,
    pub ReplaceContents: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: PP_Resource)>,
    pub Flush: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: Struct_PP_CompletionCallback)
                                         -> int32_t>,
}
pub type PP_Graphics3DAttrib = ::libc::c_uint;
pub const PP_GRAPHICS3DATTRIB_ALPHA_SIZE: ::libc::c_uint = 12321;
pub const PP_GRAPHICS3DATTRIB_BLUE_SIZE: ::libc::c_uint = 12322;
pub const PP_GRAPHICS3DATTRIB_GREEN_SIZE: ::libc::c_uint = 12323;
pub const PP_GRAPHICS3DATTRIB_RED_SIZE: ::libc::c_uint = 12324;
pub const PP_GRAPHICS3DATTRIB_DEPTH_SIZE: ::libc::c_uint = 12325;
pub const PP_GRAPHICS3DATTRIB_STENCIL_SIZE: ::libc::c_uint = 12326;
pub const PP_GRAPHICS3DATTRIB_SAMPLES: ::libc::c_uint = 12337;
pub const PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS: ::libc::c_uint = 12338;
pub const PP_GRAPHICS3DATTRIB_NONE: ::libc::c_uint = 12344;
pub const PP_GRAPHICS3DATTRIB_HEIGHT: ::libc::c_uint = 12374;
pub const PP_GRAPHICS3DATTRIB_WIDTH: ::libc::c_uint = 12375;
pub const PP_GRAPHICS3DATTRIB_SWAP_BEHAVIOR: ::libc::c_uint = 12435;
pub const PP_GRAPHICS3DATTRIB_BUFFER_PRESERVED: ::libc::c_uint = 12436;
pub const PP_GRAPHICS3DATTRIB_BUFFER_DESTROYED: ::libc::c_uint = 12437;
pub const PP_GRAPHICS3DATTRIB_GPU_PREFERENCE: ::libc::c_uint = 69632;
pub const PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_LOW_POWER: ::libc::c_uint =
    69633;
pub const PP_GRAPHICS3DATTRIB_GPU_PREFERENCE_PERFORMANCE: ::libc::c_uint =
    69634;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_Graphics3DAttrib {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_Graphics3DAttrib_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_Graphics3D_1_0 {
    pub GetAttribMaxValue: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: int32_t,
                                                      arg3: *mut int32_t)
                                                     -> int32_t>,
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_Resource,
                                           arg3: *const int32_t)
                                          -> PP_Resource>,
    pub IsGraphics3D: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub GetAttribs: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: *mut int32_t)
                                              -> int32_t>,
    pub SetAttribs: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: *const int32_t)
                                              -> int32_t>,
    pub GetError: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> int32_t>,
    pub ResizeBuffers: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: int32_t,
                                                  arg3: int32_t) -> int32_t>,
    pub SwapBuffers: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2:
                                                    Struct_PP_CompletionCallback)
                                               -> int32_t>,
}
pub type PPB_Graphics3D = Struct_PPB_Graphics3D_1_0;
pub type PP_NetAddress_Family = ::libc::c_uint;
pub const PP_NETADDRESS_FAMILY_UNSPECIFIED: ::libc::c_uint = 0;
pub const PP_NETADDRESS_FAMILY_IPV4: ::libc::c_uint = 1;
pub const PP_NETADDRESS_FAMILY_IPV6: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_NetAddress_Family {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_NetAddress_Family_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_NetAddress_IPv4 {
    pub port: uint16_t,
    pub addr: [uint8_t, ..4u],
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_NetAddress_IPv4 {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_NetAddress_IPv4_is_not_6_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_NetAddress_IPv6 {
    pub port: uint16_t,
    pub addr: [uint8_t, ..16u],
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_NetAddress_IPv6 {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_NetAddress_IPv6_is_not_18_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_NetAddress_1_0 {
    pub CreateFromIPv4Address: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance,
                                                          arg2:
                                                              *const Struct_PP_NetAddress_IPv4)
                                                         -> PP_Resource>,
    pub CreateFromIPv6Address: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance,
                                                          arg2:
                                                              *const Struct_PP_NetAddress_IPv6)
                                                         -> PP_Resource>,
    pub IsNetAddress: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub GetFamily: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_NetAddress_Family>,
    pub DescribeAsString: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: PP_Bool)
                                                    -> Struct_PP_Var>,
    pub DescribeAsIPv4Address: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource,
                                                          arg2:
                                                              *mut Struct_PP_NetAddress_IPv4)
                                                         -> PP_Bool>,
    pub DescribeAsIPv6Address: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource,
                                                          arg2:
                                                              *mut Struct_PP_NetAddress_IPv6)
                                                         -> PP_Bool>,
}
pub type PPB_NetAddress = Struct_PPB_NetAddress_1_0;
pub type PP_HostResolver_Flag = ::libc::c_uint;
pub const PP_HOSTRESOLVER_FLAG_CANONNAME: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_HostResolver_Flag {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_HostResolver_Flag_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_HostResolver_Hint {
    pub family: PP_NetAddress_Family,
    pub flags: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_HostResolver_Hint {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_HostResolver_Hint_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_HostResolver_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsHostResolver: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> PP_Bool>,
    pub Resolve: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: *const ::libc::c_char,
                                            arg3: uint16_t,
                                            arg4:
                                                *const Struct_PP_HostResolver_Hint,
                                            arg5:
                                                Struct_PP_CompletionCallback)
                                           -> int32_t>,
    pub GetCanonicalName: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> Struct_PP_Var>,
    pub GetNetAddressCount: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource)
                                                      -> uint32_t>,
    pub GetNetAddress: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: uint32_t)
                                                 -> PP_Resource>,
}
pub type PPB_HostResolver = Struct_PPB_HostResolver_1_0;
pub type PP_ImageDataFormat = ::libc::c_uint;
pub const PP_IMAGEDATAFORMAT_BGRA_PREMUL: ::libc::c_uint = 0;
pub const PP_IMAGEDATAFORMAT_RGBA_PREMUL: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_ImageDataFormat {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_ImageDataFormat_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_ImageDataDesc {
    pub format: PP_ImageDataFormat,
    pub size: Struct_PP_Size,
    pub stride: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_ImageDataDesc {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_ImageDataDesc_is_not_16_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_ImageData_1_0 {
    pub GetNativeImageDataFormat: ::std::option::Option<extern "C" fn()
                                                            ->
                                                                PP_ImageDataFormat>,
    pub IsImageDataFormatSupported: ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   PP_ImageDataFormat)
                                                              -> PP_Bool>,
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_ImageDataFormat,
                                           arg3: *const Struct_PP_Size,
                                           arg4: PP_Bool) -> PP_Resource>,
    pub IsImageData: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Describe: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2:
                                                 *mut Struct_PP_ImageDataDesc)
                                            -> PP_Bool>,
    pub Map: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                       -> *mut ::libc::c_void>,
    pub Unmap: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
}
pub type PPB_ImageData = Struct_PPB_ImageData_1_0;
#[repr(C)]
pub struct Struct_PP_TouchPoint {
    pub id: uint32_t,
    pub position: Struct_PP_FloatPoint,
    pub radius: Struct_PP_FloatPoint,
    pub rotation_angle: ::libc::c_float,
    pub pressure: ::libc::c_float,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TouchPoint {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TouchPoint_is_not_28_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_InputEvent_Type = ::libc::c_int;
pub const PP_INPUTEVENT_TYPE_UNDEFINED: ::libc::c_int = -1;
pub const PP_INPUTEVENT_TYPE_MOUSEDOWN: ::libc::c_int = 0;
pub const PP_INPUTEVENT_TYPE_MOUSEUP: ::libc::c_int = 1;
pub const PP_INPUTEVENT_TYPE_MOUSEMOVE: ::libc::c_int = 2;
pub const PP_INPUTEVENT_TYPE_MOUSEENTER: ::libc::c_int = 3;
pub const PP_INPUTEVENT_TYPE_MOUSELEAVE: ::libc::c_int = 4;
pub const PP_INPUTEVENT_TYPE_WHEEL: ::libc::c_int = 5;
pub const PP_INPUTEVENT_TYPE_RAWKEYDOWN: ::libc::c_int = 6;
pub const PP_INPUTEVENT_TYPE_KEYDOWN: ::libc::c_int = 7;
pub const PP_INPUTEVENT_TYPE_KEYUP: ::libc::c_int = 8;
pub const PP_INPUTEVENT_TYPE_CHAR: ::libc::c_int = 9;
pub const PP_INPUTEVENT_TYPE_CONTEXTMENU: ::libc::c_int = 10;
pub const PP_INPUTEVENT_TYPE_IME_COMPOSITION_START: ::libc::c_int = 11;
pub const PP_INPUTEVENT_TYPE_IME_COMPOSITION_UPDATE: ::libc::c_int = 12;
pub const PP_INPUTEVENT_TYPE_IME_COMPOSITION_END: ::libc::c_int = 13;
pub const PP_INPUTEVENT_TYPE_IME_TEXT: ::libc::c_int = 14;
pub const PP_INPUTEVENT_TYPE_TOUCHSTART: ::libc::c_int = 15;
pub const PP_INPUTEVENT_TYPE_TOUCHMOVE: ::libc::c_int = 16;
pub const PP_INPUTEVENT_TYPE_TOUCHEND: ::libc::c_int = 17;
pub const PP_INPUTEVENT_TYPE_TOUCHCANCEL: ::libc::c_int = 18;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Type {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Type_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_InputEvent_Modifier = ::libc::c_uint;
pub const PP_INPUTEVENT_MODIFIER_SHIFTKEY: ::libc::c_uint = 1;
pub const PP_INPUTEVENT_MODIFIER_CONTROLKEY: ::libc::c_uint = 2;
pub const PP_INPUTEVENT_MODIFIER_ALTKEY: ::libc::c_uint = 4;
pub const PP_INPUTEVENT_MODIFIER_METAKEY: ::libc::c_uint = 8;
pub const PP_INPUTEVENT_MODIFIER_ISKEYPAD: ::libc::c_uint = 16;
pub const PP_INPUTEVENT_MODIFIER_ISAUTOREPEAT: ::libc::c_uint = 32;
pub const PP_INPUTEVENT_MODIFIER_LEFTBUTTONDOWN: ::libc::c_uint = 64;
pub const PP_INPUTEVENT_MODIFIER_MIDDLEBUTTONDOWN: ::libc::c_uint = 128;
pub const PP_INPUTEVENT_MODIFIER_RIGHTBUTTONDOWN: ::libc::c_uint = 256;
pub const PP_INPUTEVENT_MODIFIER_CAPSLOCKKEY: ::libc::c_uint = 512;
pub const PP_INPUTEVENT_MODIFIER_NUMLOCKKEY: ::libc::c_uint = 1024;
pub const PP_INPUTEVENT_MODIFIER_ISLEFT: ::libc::c_uint = 2048;
pub const PP_INPUTEVENT_MODIFIER_ISRIGHT: ::libc::c_uint = 4096;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Modifier {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Modifier_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_InputEvent_MouseButton = ::libc::c_int;
pub const PP_INPUTEVENT_MOUSEBUTTON_NONE: ::libc::c_int = -1;
pub const PP_INPUTEVENT_MOUSEBUTTON_LEFT: ::libc::c_int = 0;
pub const PP_INPUTEVENT_MOUSEBUTTON_MIDDLE: ::libc::c_int = 1;
pub const PP_INPUTEVENT_MOUSEBUTTON_RIGHT: ::libc::c_int = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_MouseButton {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_MouseButton_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_InputEvent_Class = ::libc::c_uint;
pub const PP_INPUTEVENT_CLASS_MOUSE: ::libc::c_uint = 1;
pub const PP_INPUTEVENT_CLASS_KEYBOARD: ::libc::c_uint = 2;
pub const PP_INPUTEVENT_CLASS_WHEEL: ::libc::c_uint = 4;
pub const PP_INPUTEVENT_CLASS_TOUCH: ::libc::c_uint = 8;
pub const PP_INPUTEVENT_CLASS_IME: ::libc::c_uint = 16;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Class {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Class_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_InputEvent_1_0 {
    pub RequestInputEvents: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Instance,
                                                       arg2: uint32_t)
                                                      -> int32_t>,
    pub RequestFilteringInputEvents: ::std::option::Option<extern "C" fn
                                                               (arg1:
                                                                    PP_Instance,
                                                                arg2:
                                                                    uint32_t)
                                                               -> int32_t>,
    pub ClearInputEventRequest: ::std::option::Option<extern "C" fn
                                                          (arg1: PP_Instance,
                                                           arg2: uint32_t)>,
    pub IsInputEvent: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub GetType: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> PP_InputEvent_Type>,
    pub GetTimeStamp: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_TimeTicks>,
    pub GetModifiers: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> uint32_t>,
}
pub type PPB_InputEvent = Struct_PPB_InputEvent_1_0;
#[repr(C)]
pub struct Struct_PPB_MouseInputEvent_1_1 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks, arg4: uint32_t,
                                           arg5: PP_InputEvent_MouseButton,
                                           arg6: *const Struct_PP_Point,
                                           arg7: int32_t,
                                           arg8: *const Struct_PP_Point)
                                          -> PP_Resource>,
    pub IsMouseInputEvent: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Bool>,
    pub GetButton: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_InputEvent_MouseButton>,
    pub GetPosition: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> Struct_PP_Point>,
    pub GetClickCount: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> int32_t>,
    pub GetMovement: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> Struct_PP_Point>,
}
pub type PPB_MouseInputEvent = Struct_PPB_MouseInputEvent_1_1;
#[repr(C)]
pub struct Struct_PPB_MouseInputEvent_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks, arg4: uint32_t,
                                           arg5: PP_InputEvent_MouseButton,
                                           arg6: *const Struct_PP_Point,
                                           arg7: int32_t) -> PP_Resource>,
    pub IsMouseInputEvent: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Bool>,
    pub GetButton: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_InputEvent_MouseButton>,
    pub GetPosition: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> Struct_PP_Point>,
    pub GetClickCount: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> int32_t>,
}
#[repr(C)]
pub struct Struct_PPB_WheelInputEvent_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_TimeTicks, arg3: uint32_t,
                                           arg4: *const Struct_PP_FloatPoint,
                                           arg5: *const Struct_PP_FloatPoint,
                                           arg6: PP_Bool) -> PP_Resource>,
    pub IsWheelInputEvent: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Bool>,
    pub GetDelta: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> Struct_PP_FloatPoint>,
    pub GetTicks: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> Struct_PP_FloatPoint>,
    pub GetScrollByPage: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Bool>,
}
pub type PPB_WheelInputEvent = Struct_PPB_WheelInputEvent_1_0;
#[repr(C)]
pub struct Struct_PPB_KeyboardInputEvent_1_2 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks, arg4: uint32_t,
                                           arg5: uint32_t,
                                           arg6: Struct_PP_Var,
                                           arg7: Struct_PP_Var)
                                          -> PP_Resource>,
    pub IsKeyboardInputEvent: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource)
                                                        -> PP_Bool>,
    pub GetKeyCode: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                              -> uint32_t>,
    pub GetCharacterText: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> Struct_PP_Var>,
    pub GetCode: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
}
pub type PPB_KeyboardInputEvent = Struct_PPB_KeyboardInputEvent_1_2;
#[repr(C)]
pub struct Struct_PPB_KeyboardInputEvent_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks, arg4: uint32_t,
                                           arg5: uint32_t,
                                           arg6: Struct_PP_Var)
                                          -> PP_Resource>,
    pub IsKeyboardInputEvent: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource)
                                                        -> PP_Bool>,
    pub GetKeyCode: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                              -> uint32_t>,
    pub GetCharacterText: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> Struct_PP_Var>,
}
pub type PP_TouchListType = ::libc::c_uint;
pub const PP_TOUCHLIST_TYPE_TOUCHES: ::libc::c_uint = 0;
pub const PP_TOUCHLIST_TYPE_CHANGEDTOUCHES: ::libc::c_uint = 1;
pub const PP_TOUCHLIST_TYPE_TARGETTOUCHES: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TouchListType {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TouchListType_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_TouchInputEvent_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks, arg4: uint32_t)
                                          -> PP_Resource>,
    pub AddTouchPoint: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: PP_TouchListType,
                                                  arg3:
                                                      *const Struct_PP_TouchPoint)>,
    pub IsTouchInputEvent: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Bool>,
    pub GetTouchCount: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: PP_TouchListType)
                                                 -> uint32_t>,
    pub GetTouchByIndex: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: PP_TouchListType,
                                                    arg3: uint32_t)
                                                   -> Struct_PP_TouchPoint>,
    pub GetTouchById: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: PP_TouchListType,
                                                 arg3: uint32_t)
                                                -> Struct_PP_TouchPoint>,
}
pub type PPB_TouchInputEvent = Struct_PPB_TouchInputEvent_1_0;
#[repr(C)]
pub struct Struct_PPB_IMEInputEvent_1_0 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_InputEvent_Type,
                                           arg3: PP_TimeTicks,
                                           arg4: Struct_PP_Var,
                                           arg5: uint32_t,
                                           arg6: *const uint32_t,
                                           arg7: int32_t, arg8: uint32_t,
                                           arg9: uint32_t) -> PP_Resource>,
    pub IsIMEInputEvent: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Bool>,
    pub GetText: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                           -> Struct_PP_Var>,
    pub GetSegmentNumber: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> uint32_t>,
    pub GetSegmentOffset: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: uint32_t)
                                                    -> uint32_t>,
    pub GetTargetSegment: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> int32_t>,
    pub GetSelection: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: *mut uint32_t,
                                                 arg3: *mut uint32_t)>,
}
pub type PPB_IMEInputEvent = Struct_PPB_IMEInputEvent_1_0;
#[repr(C)]
pub struct Struct_PPB_Instance_1_0 {
    pub BindGraphics: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Instance,
                                                 arg2: PP_Resource)
                                                -> PP_Bool>,
    pub IsFullFrame: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                               -> PP_Bool>,
}
pub type PPB_Instance = Struct_PPB_Instance_1_0;
pub type PP_MediaStreamAudioTrack_Attrib = ::libc::c_uint;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_NONE: ::libc::c_uint = 0;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_BUFFERS: ::libc::c_uint = 1;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_RATE: ::libc::c_uint = 2;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_SAMPLE_SIZE: ::libc::c_uint = 3;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_CHANNELS: ::libc::c_uint = 4;
pub const PP_MEDIASTREAMAUDIOTRACK_ATTRIB_DURATION: ::libc::c_uint = 5;
#[repr(C)]
pub struct Struct_PPB_MediaStreamAudioTrack_0_1 {
    pub IsMediaStreamAudioTrack: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource)
                                                           -> PP_Bool>,
    pub Configure: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: *const int32_t,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub GetAttrib: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2:
                                                  PP_MediaStreamAudioTrack_Attrib,
                                              arg3: *mut int32_t) -> int32_t>,
    pub GetId: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                         -> Struct_PP_Var>,
    pub HasEnded: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> PP_Bool>,
    pub GetBuffer: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: *mut PP_Resource,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub RecycleBuffer: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: PP_Resource)
                                                 -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
}
pub type PPB_MediaStreamAudioTrack = Struct_PPB_MediaStreamAudioTrack_0_1;
pub type PP_MediaStreamVideoTrack_Attrib = ::libc::c_uint;
pub const PP_MEDIASTREAMVIDEOTRACK_ATTRIB_NONE: ::libc::c_uint = 0;
pub const PP_MEDIASTREAMVIDEOTRACK_ATTRIB_BUFFERED_FRAMES: ::libc::c_uint =
    1;
pub const PP_MEDIASTREAMVIDEOTRACK_ATTRIB_WIDTH: ::libc::c_uint = 2;
pub const PP_MEDIASTREAMVIDEOTRACK_ATTRIB_HEIGHT: ::libc::c_uint = 3;
pub const PP_MEDIASTREAMVIDEOTRACK_ATTRIB_FORMAT: ::libc::c_uint = 4;
#[repr(C)]
pub struct Struct_PPB_MediaStreamVideoTrack_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsMediaStreamVideoTrack: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource)
                                                           -> PP_Bool>,
    pub Configure: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: *const int32_t,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub GetAttrib: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2:
                                                  PP_MediaStreamVideoTrack_Attrib,
                                              arg3: *mut int32_t) -> int32_t>,
    pub GetId: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                         -> Struct_PP_Var>,
    pub HasEnded: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> PP_Bool>,
    pub GetFrame: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: *mut PP_Resource,
                                             arg3:
                                                 Struct_PP_CompletionCallback)
                                            -> int32_t>,
    pub RecycleFrame: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: PP_Resource)
                                                -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub GetEmptyFrame: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: *mut PP_Resource,
                                                  arg3:
                                                      Struct_PP_CompletionCallback)
                                                 -> int32_t>,
    pub PutFrame: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: PP_Resource) -> int32_t>,
}
#[repr(C)]
pub struct Struct_PPB_MediaStreamVideoTrack_0_1 {
    pub IsMediaStreamVideoTrack: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource)
                                                           -> PP_Bool>,
    pub Configure: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: *const int32_t,
                                              arg3:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub GetAttrib: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2:
                                                  PP_MediaStreamVideoTrack_Attrib,
                                              arg3: *mut int32_t) -> int32_t>,
    pub GetId: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                         -> Struct_PP_Var>,
    pub HasEnded: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> PP_Bool>,
    pub GetFrame: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: *mut PP_Resource,
                                             arg3:
                                                 Struct_PP_CompletionCallback)
                                            -> int32_t>,
    pub RecycleFrame: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: PP_Resource)
                                                -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
}
pub type PPB_MediaStreamVideoTrack = Struct_PPB_MediaStreamVideoTrack_0_1;
#[repr(C)]
pub struct Struct_PPB_MessageLoop_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub GetForMainThread: ::std::option::Option<extern "C" fn()
                                                    -> PP_Resource>,
    pub GetCurrent: ::std::option::Option<extern "C" fn() -> PP_Resource>,
    pub AttachToCurrentThread: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource)
                                                         -> int32_t>,
    pub Run: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                       -> int32_t>,
    pub PostWork: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2:
                                                 Struct_PP_CompletionCallback,
                                             arg3: int64_t) -> int32_t>,
    pub PostQuit: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource, arg2: PP_Bool)
                                            -> int32_t>,
}
pub type PPB_MessageLoop = Struct_PPB_MessageLoop_1_0;
#[repr(C)]
pub struct Struct_PPP_MessageHandler_0_1 {
    pub HandleMessage: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: *mut ::libc::c_void,
                                                  arg3: Struct_PP_Var)>,
    pub HandleBlockingMessage: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance,
                                                          arg2:
                                                              *mut ::libc::c_void,
                                                          arg3: Struct_PP_Var)
                                                         -> Struct_PP_Var>,
    pub Destroy: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Instance,
                                            arg2: *mut ::libc::c_void)>,
}
#[repr(C)]
pub struct Struct_PPB_Messaging_1_1 {
    pub PostMessage: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Instance,
                                                arg2: Struct_PP_Var)>,
    pub RegisterMessageHandler: ::std::option::Option<extern "C" fn
                                                          (arg1: PP_Instance,
                                                           arg2:
                                                               *mut ::libc::c_void,
                                                           arg3:
                                                               *const Struct_PPP_MessageHandler_0_1,
                                                           arg4: PP_Resource)
                                                          -> int32_t>,
    pub UnregisterMessageHandler: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Instance)>,
}
#[repr(C)]
pub struct Struct_PPB_Messaging_1_0 {
    pub PostMessage: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Instance,
                                                arg2: Struct_PP_Var)>,
}
pub type PPB_Messaging = Struct_PPB_Messaging_1_0;
pub type Enum_PP_MouseCursor_Type = ::libc::c_int;
pub const PP_MOUSECURSOR_TYPE_CUSTOM: ::libc::c_int = -1;
pub const PP_MOUSECURSOR_TYPE_POINTER: ::libc::c_int = 0;
pub const PP_MOUSECURSOR_TYPE_CROSS: ::libc::c_int = 1;
pub const PP_MOUSECURSOR_TYPE_HAND: ::libc::c_int = 2;
pub const PP_MOUSECURSOR_TYPE_IBEAM: ::libc::c_int = 3;
pub const PP_MOUSECURSOR_TYPE_WAIT: ::libc::c_int = 4;
pub const PP_MOUSECURSOR_TYPE_HELP: ::libc::c_int = 5;
pub const PP_MOUSECURSOR_TYPE_EASTRESIZE: ::libc::c_int = 6;
pub const PP_MOUSECURSOR_TYPE_NORTHRESIZE: ::libc::c_int = 7;
pub const PP_MOUSECURSOR_TYPE_NORTHEASTRESIZE: ::libc::c_int = 8;
pub const PP_MOUSECURSOR_TYPE_NORTHWESTRESIZE: ::libc::c_int = 9;
pub const PP_MOUSECURSOR_TYPE_SOUTHRESIZE: ::libc::c_int = 10;
pub const PP_MOUSECURSOR_TYPE_SOUTHEASTRESIZE: ::libc::c_int = 11;
pub const PP_MOUSECURSOR_TYPE_SOUTHWESTRESIZE: ::libc::c_int = 12;
pub const PP_MOUSECURSOR_TYPE_WESTRESIZE: ::libc::c_int = 13;
pub const PP_MOUSECURSOR_TYPE_NORTHSOUTHRESIZE: ::libc::c_int = 14;
pub const PP_MOUSECURSOR_TYPE_EASTWESTRESIZE: ::libc::c_int = 15;
pub const PP_MOUSECURSOR_TYPE_NORTHEASTSOUTHWESTRESIZE: ::libc::c_int = 16;
pub const PP_MOUSECURSOR_TYPE_NORTHWESTSOUTHEASTRESIZE: ::libc::c_int = 17;
pub const PP_MOUSECURSOR_TYPE_COLUMNRESIZE: ::libc::c_int = 18;
pub const PP_MOUSECURSOR_TYPE_ROWRESIZE: ::libc::c_int = 19;
pub const PP_MOUSECURSOR_TYPE_MIDDLEPANNING: ::libc::c_int = 20;
pub const PP_MOUSECURSOR_TYPE_EASTPANNING: ::libc::c_int = 21;
pub const PP_MOUSECURSOR_TYPE_NORTHPANNING: ::libc::c_int = 22;
pub const PP_MOUSECURSOR_TYPE_NORTHEASTPANNING: ::libc::c_int = 23;
pub const PP_MOUSECURSOR_TYPE_NORTHWESTPANNING: ::libc::c_int = 24;
pub const PP_MOUSECURSOR_TYPE_SOUTHPANNING: ::libc::c_int = 25;
pub const PP_MOUSECURSOR_TYPE_SOUTHEASTPANNING: ::libc::c_int = 26;
pub const PP_MOUSECURSOR_TYPE_SOUTHWESTPANNING: ::libc::c_int = 27;
pub const PP_MOUSECURSOR_TYPE_WESTPANNING: ::libc::c_int = 28;
pub const PP_MOUSECURSOR_TYPE_MOVE: ::libc::c_int = 29;
pub const PP_MOUSECURSOR_TYPE_VERTICALTEXT: ::libc::c_int = 30;
pub const PP_MOUSECURSOR_TYPE_CELL: ::libc::c_int = 31;
pub const PP_MOUSECURSOR_TYPE_CONTEXTMENU: ::libc::c_int = 32;
pub const PP_MOUSECURSOR_TYPE_ALIAS: ::libc::c_int = 33;
pub const PP_MOUSECURSOR_TYPE_PROGRESS: ::libc::c_int = 34;
pub const PP_MOUSECURSOR_TYPE_NODROP: ::libc::c_int = 35;
pub const PP_MOUSECURSOR_TYPE_COPY: ::libc::c_int = 36;
pub const PP_MOUSECURSOR_TYPE_NONE: ::libc::c_int = 37;
pub const PP_MOUSECURSOR_TYPE_NOTALLOWED: ::libc::c_int = 38;
pub const PP_MOUSECURSOR_TYPE_ZOOMIN: ::libc::c_int = 39;
pub const PP_MOUSECURSOR_TYPE_ZOOMOUT: ::libc::c_int = 40;
pub const PP_MOUSECURSOR_TYPE_GRAB: ::libc::c_int = 41;
pub const PP_MOUSECURSOR_TYPE_GRABBING: ::libc::c_int = 42;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_MouseCursor_Type {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_MouseCursor_Type_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_MouseCursor_1_0 {
    pub SetCursor: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Instance,
                                              arg2: Enum_PP_MouseCursor_Type,
                                              arg3: PP_Resource,
                                              arg4: *const Struct_PP_Point)
                                             -> PP_Bool>,
}
pub type PPB_MouseCursor = Struct_PPB_MouseCursor_1_0;
#[repr(C)]
pub struct Struct_PPB_MouseLock_1_0 {
    pub LockMouse: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Instance,
                                              arg2:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
    pub UnlockMouse: ::std::option::Option<extern "C" fn(arg1: PP_Instance)>,
}
pub type PPB_MouseLock = Struct_PPB_MouseLock_1_0;
pub type PP_NetworkList_Type = ::libc::c_uint;
pub const PP_NETWORKLIST_TYPE_UNKNOWN: ::libc::c_uint = 0;
pub const PP_NETWORKLIST_TYPE_ETHERNET: ::libc::c_uint = 1;
pub const PP_NETWORKLIST_TYPE_WIFI: ::libc::c_uint = 2;
pub const PP_NETWORKLIST_TYPE_CELLULAR: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_NetworkList_Type {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_NetworkList_Type_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_NetworkList_State = ::libc::c_uint;
pub const PP_NETWORKLIST_STATE_DOWN: ::libc::c_uint = 0;
pub const PP_NETWORKLIST_STATE_UP: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_NetworkList_State {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_NetworkList_State_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_NetworkList_1_0 {
    pub IsNetworkList: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetCount: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> uint32_t>,
    pub GetName: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource, arg2: uint32_t)
                                           -> Struct_PP_Var>,
    pub GetType: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource, arg2: uint32_t)
                                           -> PP_NetworkList_Type>,
    pub GetState: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: uint32_t)
                                            -> PP_NetworkList_State>,
    pub GetIpAddresses: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: uint32_t,
                                                   arg3:
                                                       Struct_PP_ArrayOutput)
                                                  -> int32_t>,
    pub GetDisplayName: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: uint32_t)
                                                  -> Struct_PP_Var>,
    pub GetMTU: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource, arg2: uint32_t)
                                          -> uint32_t>,
}
pub type PPB_NetworkList = Struct_PPB_NetworkList_1_0;
#[repr(C)]
pub struct Struct_PPB_NetworkMonitor_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub UpdateNetworkList: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: *mut PP_Resource,
                                                      arg3:
                                                          Struct_PP_CompletionCallback)
                                                     -> int32_t>,
    pub IsNetworkMonitor: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Bool>,
}
pub type PPB_NetworkMonitor = Struct_PPB_NetworkMonitor_1_0;
#[repr(C)]
pub struct Struct_PPB_NetworkProxy_1_0 {
    pub GetProxyForURL: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Instance,
                                                   arg2: Struct_PP_Var,
                                                   arg3: *mut Struct_PP_Var,
                                                   arg4:
                                                       Struct_PP_CompletionCallback)
                                                  -> int32_t>,
}
pub type PPB_NetworkProxy = Struct_PPB_NetworkProxy_1_0;
pub type GLvoid = ::libc::c_void;
pub type GLsizei = ::libc::c_int;
pub type GLushort = ::libc::c_ushort;
pub type GLshort = ::libc::c_short;
pub type GLubyte = ::libc::c_uchar;
pub type GLenum = ::libc::c_uint;
pub type GLint = ::libc::c_int;
pub type GLboolean = ::libc::c_uchar;
pub type GLbitfield = ::libc::c_uint;
pub type GLfloat = ::libc::c_float;
pub type GLclampf = ::libc::c_float;
pub type GLbyte = ::libc::c_char;
pub type GLuint = ::libc::c_uint;
pub type GLfixed = ::libc::c_int;
pub type GLclampx = ::libc::c_int;
pub type GLintptr = ::libc::c_long;
pub type GLsizeiptr = ::libc::c_long;
#[repr(C)]
pub struct Struct_PPB_OpenGLES2 {
    pub ActiveTexture: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum)>,
    pub AttachShader: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLuint)>,
    pub BindAttribLocation: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource,
                                                       arg2: GLuint,
                                                       arg3: GLuint,
                                                       arg4:
                                                           *const ::libc::c_char)>,
    pub BindBuffer: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLenum, arg3: GLuint)>,
    pub BindFramebuffer: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLenum,
                                                    arg3: GLuint)>,
    pub BindRenderbuffer: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLenum,
                                                     arg3: GLuint)>,
    pub BindTexture: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum, arg3: GLuint)>,
    pub BlendColor: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLclampf, arg3: GLclampf,
                                               arg4: GLclampf,
                                               arg5: GLclampf)>,
    pub BlendEquation: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum)>,
    pub BlendEquationSeparate: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource,
                                                          arg2: GLenum,
                                                          arg3: GLenum)>,
    pub BlendFunc: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLenum,
                                              arg3: GLenum)>,
    pub BlendFuncSeparate: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLenum,
                                                      arg3: GLenum,
                                                      arg4: GLenum,
                                                      arg5: GLenum)>,
    pub BufferData: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLenum, arg3: GLsizeiptr,
                                               arg4: *const ::libc::c_void,
                                               arg5: GLenum)>,
    pub BufferSubData: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum,
                                                  arg3: GLintptr,
                                                  arg4: GLsizeiptr,
                                                  arg5:
                                                      *const ::libc::c_void)>,
    pub CheckFramebufferStatus: ::std::option::Option<extern "C" fn
                                                          (arg1: PP_Resource,
                                                           arg2: GLenum)
                                                          -> GLenum>,
    pub Clear: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: GLbitfield)>,
    pub ClearColor: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLclampf, arg3: GLclampf,
                                               arg4: GLclampf,
                                               arg5: GLclampf)>,
    pub ClearDepthf: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLclampf)>,
    pub ClearStencil: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLint)>,
    pub ColorMask: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: GLboolean,
                                              arg3: GLboolean,
                                              arg4: GLboolean,
                                              arg5: GLboolean)>,
    pub CompileShader: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLuint)>,
    pub CompressedTexImage2D: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2: GLenum,
                                                         arg3: GLint,
                                                         arg4: GLenum,
                                                         arg5: GLsizei,
                                                         arg6: GLsizei,
                                                         arg7: GLint,
                                                         arg8: GLsizei,
                                                         arg9:
                                                             *const ::libc::c_void)>,
    pub CompressedTexSubImage2D: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2: GLenum,
                                                            arg3: GLint,
                                                            arg4: GLint,
                                                            arg5: GLint,
                                                            arg6: GLsizei,
                                                            arg7: GLsizei,
                                                            arg8: GLenum,
                                                            arg9: GLsizei,
                                                            arg10:
                                                                *const ::libc::c_void)>,
    pub CopyTexImage2D: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLenum, arg3: GLint,
                                                   arg4: GLenum, arg5: GLint,
                                                   arg6: GLint, arg7: GLsizei,
                                                   arg8: GLsizei,
                                                   arg9: GLint)>,
    pub CopyTexSubImage2D: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLenum,
                                                      arg3: GLint,
                                                      arg4: GLint,
                                                      arg5: GLint,
                                                      arg6: GLint,
                                                      arg7: GLint,
                                                      arg8: GLsizei,
                                                      arg9: GLsizei)>,
    pub CreateProgram: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> GLuint>,
    pub CreateShader: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLenum) -> GLuint>,
    pub CullFace: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: GLenum)>,
    pub DeleteBuffers: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLsizei,
                                                  arg3: *const GLuint)>,
    pub DeleteFramebuffers: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource,
                                                       arg2: GLsizei,
                                                       arg3: *const GLuint)>,
    pub DeleteProgram: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLuint)>,
    pub DeleteRenderbuffers: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: GLsizei,
                                                        arg3: *const GLuint)>,
    pub DeleteShader: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint)>,
    pub DeleteTextures: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLsizei,
                                                   arg3: *const GLuint)>,
    pub DepthFunc: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: GLenum)>,
    pub DepthMask: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: GLboolean)>,
    pub DepthRangef: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLclampf,
                                                arg3: GLclampf)>,
    pub DetachShader: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLuint)>,
    pub Disable: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource, arg2: GLenum)>,
    pub DisableVertexAttribArray: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLuint)>,
    pub DrawArrays: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLenum, arg3: GLint,
                                               arg4: GLsizei)>,
    pub DrawElements: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLenum, arg3: GLsizei,
                                                 arg4: GLenum,
                                                 arg5:
                                                     *const ::libc::c_void)>,
    pub Enable: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource, arg2: GLenum)>,
    pub EnableVertexAttribArray: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2: GLuint)>,
    pub Finish: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub Flush: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub FramebufferRenderbuffer: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2: GLenum,
                                                            arg3: GLenum,
                                                            arg4: GLenum,
                                                            arg5: GLuint)>,
    pub FramebufferTexture2D: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2: GLenum,
                                                         arg3: GLenum,
                                                         arg4: GLenum,
                                                         arg5: GLuint,
                                                         arg6: GLint)>,
    pub FrontFace: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: GLenum)>,
    pub GenBuffers: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLsizei,
                                               arg3: *mut GLuint)>,
    pub GenerateMipmap: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLenum)>,
    pub GenFramebuffers: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLsizei,
                                                    arg3: *mut GLuint)>,
    pub GenRenderbuffers: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLsizei,
                                                     arg3: *mut GLuint)>,
    pub GenTextures: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLsizei,
                                                arg3: *mut GLuint)>,
    pub GetActiveAttrib: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: GLuint,
                                                    arg4: GLsizei,
                                                    arg5: *mut GLsizei,
                                                    arg6: *mut GLint,
                                                    arg7: *mut GLenum,
                                                    arg8:
                                                        *mut ::libc::c_char)>,
    pub GetActiveUniform: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLuint,
                                                     arg3: GLuint,
                                                     arg4: GLsizei,
                                                     arg5: *mut GLsizei,
                                                     arg6: *mut GLint,
                                                     arg7: *mut GLenum,
                                                     arg8:
                                                         *mut ::libc::c_char)>,
    pub GetAttachedShaders: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource,
                                                       arg2: GLuint,
                                                       arg3: GLsizei,
                                                       arg4: *mut GLsizei,
                                                       arg5: *mut GLuint)>,
    pub GetAttribLocation: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLuint,
                                                      arg3:
                                                          *const ::libc::c_char)
                                                     -> GLint>,
    pub GetBooleanv: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum,
                                                arg3: *mut GLboolean)>,
    pub GetBufferParameteriv: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2: GLenum,
                                                         arg3: GLenum,
                                                         arg4: *mut GLint)>,
    pub GetError: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                            -> GLenum>,
    pub GetFloatv: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLenum,
                                              arg3: *mut GLfloat)>,
    pub GetFramebufferAttachmentParameteriv: ::std::option::Option<extern "C" fn
                                                                       (arg1:
                                                                            PP_Resource,
                                                                        arg2:
                                                                            GLenum,
                                                                        arg3:
                                                                            GLenum,
                                                                        arg4:
                                                                            GLenum,
                                                                        arg5:
                                                                            *mut GLint)>,
    pub GetIntegerv: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum,
                                                arg3: *mut GLint)>,
    pub GetProgramiv: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLenum,
                                                 arg4: *mut GLint)>,
    pub GetProgramInfoLog: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLuint,
                                                      arg3: GLsizei,
                                                      arg4: *mut GLsizei,
                                                      arg5:
                                                          *mut ::libc::c_char)>,
    pub GetRenderbufferParameteriv: ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   PP_Resource,
                                                               arg2: GLenum,
                                                               arg3: GLenum,
                                                               arg4:
                                                                   *mut GLint)>,
    pub GetShaderiv: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLuint, arg3: GLenum,
                                                arg4: *mut GLint)>,
    pub GetShaderInfoLog: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLuint,
                                                     arg3: GLsizei,
                                                     arg4: *mut GLsizei,
                                                     arg5:
                                                         *mut ::libc::c_char)>,
    pub GetShaderPrecisionFormat: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLenum,
                                                             arg3: GLenum,
                                                             arg4: *mut GLint,
                                                             arg5:
                                                                 *mut GLint)>,
    pub GetShaderSource: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: GLsizei,
                                                    arg4: *mut GLsizei,
                                                    arg5:
                                                        *mut ::libc::c_char)>,
    pub GetString: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLenum)
                                             -> *const GLubyte>,
    pub GetTexParameterfv: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLenum,
                                                      arg3: GLenum,
                                                      arg4: *mut GLfloat)>,
    pub GetTexParameteriv: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLenum,
                                                      arg3: GLenum,
                                                      arg4: *mut GLint)>,
    pub GetUniformfv: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLint,
                                                 arg4: *mut GLfloat)>,
    pub GetUniformiv: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLint,
                                                 arg4: *mut GLint)>,
    pub GetUniformLocation: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource,
                                                       arg2: GLuint,
                                                       arg3:
                                                           *const ::libc::c_char)
                                                      -> GLint>,
    pub GetVertexAttribfv: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLuint,
                                                      arg3: GLenum,
                                                      arg4: *mut GLfloat)>,
    pub GetVertexAttribiv: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLuint,
                                                      arg3: GLenum,
                                                      arg4: *mut GLint)>,
    pub GetVertexAttribPointerv: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2: GLuint,
                                                            arg3: GLenum,
                                                            arg4:
                                                                *mut *mut ::libc::c_void)>,
    pub Hint: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: GLenum,
                                         arg3: GLenum)>,
    pub IsBuffer: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource, arg2: GLuint)
                                            -> GLboolean>,
    pub IsEnabled: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLenum)
                                             -> GLboolean>,
    pub IsFramebuffer: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLuint) -> GLboolean>,
    pub IsProgram: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLuint)
                                             -> GLboolean>,
    pub IsRenderbuffer: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLuint)
                                                  -> GLboolean>,
    pub IsShader: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource, arg2: GLuint)
                                            -> GLboolean>,
    pub IsTexture: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLuint)
                                             -> GLboolean>,
    pub LineWidth: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: GLfloat)>,
    pub LinkProgram: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLuint)>,
    pub PixelStorei: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum, arg3: GLint)>,
    pub PolygonOffset: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLfloat,
                                                  arg3: GLfloat)>,
    pub ReadPixels: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLint, arg4: GLsizei,
                                               arg5: GLsizei, arg6: GLenum,
                                               arg7: GLenum,
                                               arg8: *mut ::libc::c_void)>,
    pub ReleaseShaderCompiler: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource)>,
    pub RenderbufferStorage: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: GLenum,
                                                        arg3: GLenum,
                                                        arg4: GLsizei,
                                                        arg5: GLsizei)>,
    pub SampleCoverage: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLclampf,
                                                   arg3: GLboolean)>,
    pub Scissor: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource, arg2: GLint,
                                            arg3: GLint, arg4: GLsizei,
                                            arg5: GLsizei)>,
    pub ShaderBinary: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLsizei,
                                                 arg3: *const GLuint,
                                                 arg4: GLenum,
                                                 arg5: *const ::libc::c_void,
                                                 arg6: GLsizei)>,
    pub ShaderSource: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: GLuint, arg3: GLsizei,
                                                 arg4:
                                                     *mut *const ::libc::c_char,
                                                 arg5: *const GLint)>,
    pub StencilFunc: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum, arg3: GLint,
                                                arg4: GLuint)>,
    pub StencilFuncSeparate: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: GLenum,
                                                        arg3: GLenum,
                                                        arg4: GLint,
                                                        arg5: GLuint)>,
    pub StencilMask: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLuint)>,
    pub StencilMaskSeparate: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: GLenum,
                                                        arg3: GLuint)>,
    pub StencilOp: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLenum,
                                              arg3: GLenum, arg4: GLenum)>,
    pub StencilOpSeparate: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: GLenum,
                                                      arg3: GLenum,
                                                      arg4: GLenum,
                                                      arg5: GLenum)>,
    pub TexImage2D: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLenum, arg3: GLint,
                                               arg4: GLint, arg5: GLsizei,
                                               arg6: GLsizei, arg7: GLint,
                                               arg8: GLenum, arg9: GLenum,
                                               arg10: *const ::libc::c_void)>,
    pub TexParameterf: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum, arg3: GLenum,
                                                  arg4: GLfloat)>,
    pub TexParameterfv: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLenum, arg3: GLenum,
                                                   arg4: *const GLfloat)>,
    pub TexParameteri: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum, arg3: GLenum,
                                                  arg4: GLint)>,
    pub TexParameteriv: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLenum, arg3: GLenum,
                                                   arg4: *const GLint)>,
    pub TexSubImage2D: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum, arg3: GLint,
                                                  arg4: GLint, arg5: GLint,
                                                  arg6: GLsizei,
                                                  arg7: GLsizei, arg8: GLenum,
                                                  arg9: GLenum,
                                                  arg10:
                                                      *const ::libc::c_void)>,
    pub Uniform1f: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLfloat)>,
    pub Uniform1fv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLfloat)>,
    pub Uniform1i: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLint)>,
    pub Uniform1iv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLint)>,
    pub Uniform2f: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLfloat, arg4: GLfloat)>,
    pub Uniform2fv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLfloat)>,
    pub Uniform2i: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLint, arg4: GLint)>,
    pub Uniform2iv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLint)>,
    pub Uniform3f: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLfloat, arg4: GLfloat,
                                              arg5: GLfloat)>,
    pub Uniform3fv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLfloat)>,
    pub Uniform3i: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLint, arg4: GLint,
                                              arg5: GLint)>,
    pub Uniform3iv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLint)>,
    pub Uniform4f: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLfloat, arg4: GLfloat,
                                              arg5: GLfloat, arg6: GLfloat)>,
    pub Uniform4fv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLfloat)>,
    pub Uniform4i: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource, arg2: GLint,
                                              arg3: GLint, arg4: GLint,
                                              arg5: GLint, arg6: GLint)>,
    pub Uniform4iv: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource, arg2: GLint,
                                               arg3: GLsizei,
                                               arg4: *const GLint)>,
    pub UniformMatrix2fv: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLint,
                                                     arg3: GLsizei,
                                                     arg4: GLboolean,
                                                     arg5: *const GLfloat)>,
    pub UniformMatrix3fv: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLint,
                                                     arg3: GLsizei,
                                                     arg4: GLboolean,
                                                     arg5: *const GLfloat)>,
    pub UniformMatrix4fv: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLint,
                                                     arg3: GLsizei,
                                                     arg4: GLboolean,
                                                     arg5: *const GLfloat)>,
    pub UseProgram: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLuint)>,
    pub ValidateProgram: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint)>,
    pub VertexAttrib1f: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLuint,
                                                   arg3: GLfloat)>,
    pub VertexAttrib1fv: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: *const GLfloat)>,
    pub VertexAttrib2f: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLuint,
                                                   arg3: GLfloat,
                                                   arg4: GLfloat)>,
    pub VertexAttrib2fv: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: *const GLfloat)>,
    pub VertexAttrib3f: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLuint,
                                                   arg3: GLfloat,
                                                   arg4: GLfloat,
                                                   arg5: GLfloat)>,
    pub VertexAttrib3fv: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: *const GLfloat)>,
    pub VertexAttrib4f: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLuint,
                                                   arg3: GLfloat,
                                                   arg4: GLfloat,
                                                   arg5: GLfloat,
                                                   arg6: GLfloat)>,
    pub VertexAttrib4fv: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2: GLuint,
                                                    arg3: *const GLfloat)>,
    pub VertexAttribPointer: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: GLuint,
                                                        arg3: GLint,
                                                        arg4: GLenum,
                                                        arg5: GLboolean,
                                                        arg6: GLsizei,
                                                        arg7:
                                                            *const ::libc::c_void)>,
    pub Viewport: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource, arg2: GLint,
                                             arg3: GLint, arg4: GLsizei,
                                             arg5: GLsizei)>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2InstancedArrays {
    pub DrawArraysInstancedANGLE: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLenum,
                                                             arg3: GLint,
                                                             arg4: GLsizei,
                                                             arg5: GLsizei)>,
    pub DrawElementsInstancedANGLE: ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   PP_Resource,
                                                               arg2: GLenum,
                                                               arg3: GLsizei,
                                                               arg4: GLenum,
                                                               arg5:
                                                                   *const ::libc::c_void,
                                                               arg6:
                                                                   GLsizei)>,
    pub VertexAttribDivisorANGLE: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLuint,
                                                             arg3: GLuint)>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2FramebufferBlit {
    pub BlitFramebufferEXT: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Resource,
                                                       arg2: GLint,
                                                       arg3: GLint,
                                                       arg4: GLint,
                                                       arg5: GLint,
                                                       arg6: GLint,
                                                       arg7: GLint,
                                                       arg8: GLint,
                                                       arg9: GLint,
                                                       arg10: GLbitfield,
                                                       arg11: GLenum)>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2FramebufferMultisample {
    pub RenderbufferStorageMultisampleEXT: ::std::option::Option<extern "C" fn
                                                                     (arg1:
                                                                          PP_Resource,
                                                                      arg2:
                                                                          GLenum,
                                                                      arg3:
                                                                          GLsizei,
                                                                      arg4:
                                                                          GLenum,
                                                                      arg5:
                                                                          GLsizei,
                                                                      arg6:
                                                                          GLsizei)>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2ChromiumEnableFeature {
    pub EnableFeatureCHROMIUM: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource,
                                                          arg2:
                                                              *const ::libc::c_char)
                                                         -> GLboolean>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2ChromiumMapSub {
    pub MapBufferSubDataCHROMIUM: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLuint,
                                                             arg3: GLintptr,
                                                             arg4: GLsizeiptr,
                                                             arg5: GLenum)
                                                            ->
                                                                *mut ::libc::c_void>,
    pub UnmapBufferSubDataCHROMIUM: ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   PP_Resource,
                                                               arg2:
                                                                   *const ::libc::c_void)>,
    pub MapTexSubImage2DCHROMIUM: ::std::option::Option<extern "C" fn
                                                            (arg1:
                                                                 PP_Resource,
                                                             arg2: GLenum,
                                                             arg3: GLint,
                                                             arg4: GLint,
                                                             arg5: GLint,
                                                             arg6: GLsizei,
                                                             arg7: GLsizei,
                                                             arg8: GLenum,
                                                             arg9: GLenum,
                                                             arg10: GLenum)
                                                            ->
                                                                *mut ::libc::c_void>,
    pub UnmapTexSubImage2DCHROMIUM: ::std::option::Option<extern "C" fn
                                                              (arg1:
                                                                   PP_Resource,
                                                               arg2:
                                                                   *const ::libc::c_void)>,
}
#[repr(C)]
pub struct Struct_PPB_OpenGLES2Query {
    pub GenQueriesEXT: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLsizei,
                                                  arg3: *mut GLuint)>,
    pub DeleteQueriesEXT: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: GLsizei,
                                                     arg3: *const GLuint)>,
    pub IsQueryEXT: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: GLuint) -> GLboolean>,
    pub BeginQueryEXT: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum,
                                                  arg3: GLuint)>,
    pub EndQueryEXT: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: GLenum)>,
    pub GetQueryivEXT: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Resource,
                                                  arg2: GLenum, arg3: GLenum,
                                                  arg4: *mut GLint)>,
    pub GetQueryObjectuivEXT: ::std::option::Option<extern "C" fn
                                                        (arg1: PP_Resource,
                                                         arg2: GLuint,
                                                         arg3: GLenum,
                                                         arg4: *mut GLuint)>,
}
pub type PP_TCPSocket_Option = ::libc::c_uint;
pub const PP_TCPSOCKET_OPTION_NO_DELAY: ::libc::c_uint = 0;
pub const PP_TCPSOCKET_OPTION_SEND_BUFFER_SIZE: ::libc::c_uint = 1;
pub const PP_TCPSOCKET_OPTION_RECV_BUFFER_SIZE: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TCPSocket_Option {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TCPSocket_Option_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_TCPSocket_1_1 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsTCPSocket: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Bind: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: PP_Resource,
                                         arg3: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Connect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: PP_Resource,
                                            arg3:
                                                Struct_PP_CompletionCallback)
                                           -> int32_t>,
    pub GetLocalAddress: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Resource>,
    pub GetRemoteAddress: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Resource>,
    pub Read: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource,
                                         arg2: *mut ::libc::c_char,
                                         arg3: int32_t,
                                         arg4: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Write: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *const ::libc::c_char,
                                          arg3: int32_t,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Listen: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource, arg2: int32_t,
                                           arg3: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Accept: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *mut PP_Resource,
                                           arg3: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub SetOption: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: PP_TCPSocket_Option,
                                              arg3: Struct_PP_Var,
                                              arg4:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
}
pub type PPB_TCPSocket = Struct_PPB_TCPSocket_1_1;
#[repr(C)]
pub struct Struct_PPB_TCPSocket_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsTCPSocket: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Connect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: PP_Resource,
                                            arg3:
                                                Struct_PP_CompletionCallback)
                                           -> int32_t>,
    pub GetLocalAddress: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Resource>,
    pub GetRemoteAddress: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Resource>,
    pub Read: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource,
                                         arg2: *mut ::libc::c_char,
                                         arg3: int32_t,
                                         arg4: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub Write: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource,
                                          arg2: *const ::libc::c_char,
                                          arg3: int32_t,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub SetOption: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: PP_TCPSocket_Option,
                                              arg3: Struct_PP_Var,
                                              arg4:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
}
pub type PP_TextInput_Type = ::libc::c_uint;
pub const PP_TEXTINPUT_TYPE_NONE: ::libc::c_uint = 0;
pub const PP_TEXTINPUT_TYPE_TEXT: ::libc::c_uint = 1;
pub const PP_TEXTINPUT_TYPE_PASSWORD: ::libc::c_uint = 2;
pub const PP_TEXTINPUT_TYPE_SEARCH: ::libc::c_uint = 3;
pub const PP_TEXTINPUT_TYPE_EMAIL: ::libc::c_uint = 4;
pub const PP_TEXTINPUT_TYPE_NUMBER: ::libc::c_uint = 5;
pub const PP_TEXTINPUT_TYPE_TELEPHONE: ::libc::c_uint = 6;
pub const PP_TEXTINPUT_TYPE_URL: ::libc::c_uint = 7;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TextInput_Type {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TextInput_Type_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_TextInputController_1_0 {
    pub SetTextInputType: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Instance,
                                                     arg2:
                                                         PP_TextInput_Type)>,
    pub UpdateCaretPosition: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Instance,
                                                        arg2:
                                                            *const Struct_PP_Rect)>,
    pub CancelCompositionText: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance)>,
    pub UpdateSurroundingText: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance,
                                                          arg2: Struct_PP_Var,
                                                          arg3: uint32_t,
                                                          arg4: uint32_t)>,
}
pub type PPB_TextInputController = Struct_PPB_TextInputController_1_0;
pub type PP_UDPSocket_Option = ::libc::c_uint;
pub const PP_UDPSOCKET_OPTION_ADDRESS_REUSE: ::libc::c_uint = 0;
pub const PP_UDPSOCKET_OPTION_BROADCAST: ::libc::c_uint = 1;
pub const PP_UDPSOCKET_OPTION_SEND_BUFFER_SIZE: ::libc::c_uint = 2;
pub const PP_UDPSOCKET_OPTION_RECV_BUFFER_SIZE: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_UDPSocket_Option {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_UDPSocket_Option_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_UDPSocket_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsUDPSocket: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Bind: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: PP_Resource,
                                         arg3: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub GetBoundAddress: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Resource>,
    pub RecvFrom: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: *mut ::libc::c_char,
                                             arg3: int32_t,
                                             arg4: *mut PP_Resource,
                                             arg5:
                                                 Struct_PP_CompletionCallback)
                                            -> int32_t>,
    pub SendTo: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Resource,
                                           arg2: *const ::libc::c_char,
                                           arg3: int32_t, arg4: PP_Resource,
                                           arg5: Struct_PP_CompletionCallback)
                                          -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
    pub SetOption: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Resource,
                                              arg2: PP_UDPSocket_Option,
                                              arg3: Struct_PP_Var,
                                              arg4:
                                                  Struct_PP_CompletionCallback)
                                             -> int32_t>,
}
pub type PPB_UDPSocket = Struct_PPB_UDPSocket_1_0;
#[repr(C)]
pub struct Struct_PPB_URLLoader_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsURLLoader: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Open: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource, arg2: PP_Resource,
                                         arg3: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub FollowRedirect: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2:
                                                       Struct_PP_CompletionCallback)
                                                  -> int32_t>,
    pub GetUploadProgress: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource,
                                                      arg2: *mut int64_t,
                                                      arg3: *mut int64_t)
                                                     -> PP_Bool>,
    pub GetDownloadProgress: ::std::option::Option<extern "C" fn
                                                       (arg1: PP_Resource,
                                                        arg2: *mut int64_t,
                                                        arg3: *mut int64_t)
                                                       -> PP_Bool>,
    pub GetResponseInfo: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> PP_Resource>,
    pub ReadResponseBody: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2:
                                                         *mut ::libc::c_void,
                                                     arg3: int32_t,
                                                     arg4:
                                                         Struct_PP_CompletionCallback)
                                                    -> int32_t>,
    pub FinishStreamingToFile: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Resource,
                                                          arg2:
                                                              Struct_PP_CompletionCallback)
                                                         -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn(arg1: PP_Resource)>,
}
pub type PPB_URLLoader = Struct_PPB_URLLoader_1_0;
pub type PP_URLRequestProperty = ::libc::c_uint;
pub const PP_URLREQUESTPROPERTY_URL: ::libc::c_uint = 0;
pub const PP_URLREQUESTPROPERTY_METHOD: ::libc::c_uint = 1;
pub const PP_URLREQUESTPROPERTY_HEADERS: ::libc::c_uint = 2;
pub const PP_URLREQUESTPROPERTY_STREAMTOFILE: ::libc::c_uint = 3;
pub const PP_URLREQUESTPROPERTY_FOLLOWREDIRECTS: ::libc::c_uint = 4;
pub const PP_URLREQUESTPROPERTY_RECORDDOWNLOADPROGRESS: ::libc::c_uint = 5;
pub const PP_URLREQUESTPROPERTY_RECORDUPLOADPROGRESS: ::libc::c_uint = 6;
pub const PP_URLREQUESTPROPERTY_CUSTOMREFERRERURL: ::libc::c_uint = 7;
pub const PP_URLREQUESTPROPERTY_ALLOWCROSSORIGINREQUESTS: ::libc::c_uint = 8;
pub const PP_URLREQUESTPROPERTY_ALLOWCREDENTIALS: ::libc::c_uint = 9;
pub const PP_URLREQUESTPROPERTY_CUSTOMCONTENTTRANSFERENCODING: ::libc::c_uint
           =
    10;
pub const PP_URLREQUESTPROPERTY_PREFETCHBUFFERUPPERTHRESHOLD: ::libc::c_uint
           =
    11;
pub const PP_URLREQUESTPROPERTY_PREFETCHBUFFERLOWERTHRESHOLD: ::libc::c_uint
           =
    12;
pub const PP_URLREQUESTPROPERTY_CUSTOMUSERAGENT: ::libc::c_uint = 13;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_URLRequestProperty {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_URLRequestProperty_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_URLRequestInfo_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsURLRequestInfo: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Bool>,
    pub SetProperty: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: PP_URLRequestProperty,
                                                arg3: Struct_PP_Var)
                                               -> PP_Bool>,
    pub AppendDataToBody: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2:
                                                         *const ::libc::c_void,
                                                     arg3: uint32_t)
                                                    -> PP_Bool>,
    pub AppendFileToBody: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource,
                                                     arg2: PP_Resource,
                                                     arg3: int64_t,
                                                     arg4: int64_t,
                                                     arg5: PP_Time)
                                                    -> PP_Bool>,
}
pub type PPB_URLRequestInfo = Struct_PPB_URLRequestInfo_1_0;
pub type PP_URLResponseProperty = ::libc::c_uint;
pub const PP_URLRESPONSEPROPERTY_URL: ::libc::c_uint = 0;
pub const PP_URLRESPONSEPROPERTY_REDIRECTURL: ::libc::c_uint = 1;
pub const PP_URLRESPONSEPROPERTY_REDIRECTMETHOD: ::libc::c_uint = 2;
pub const PP_URLRESPONSEPROPERTY_STATUSCODE: ::libc::c_uint = 3;
pub const PP_URLRESPONSEPROPERTY_STATUSLINE: ::libc::c_uint = 4;
pub const PP_URLRESPONSEPROPERTY_HEADERS: ::libc::c_uint = 5;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_URLResponseProperty {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_URLResponseProperty_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_URLResponseInfo_1_0 {
    pub IsURLResponseInfo: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Bool>,
    pub GetProperty: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: PP_URLResponseProperty)
                                               -> Struct_PP_Var>,
    pub GetBodyAsFileRef: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Resource>,
}
pub type PPB_URLResponseInfo = Struct_PPB_URLResponseInfo_1_0;
#[repr(C)]
pub struct Struct_PPB_Var_1_2 {
    pub AddRef: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub Release: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub VarFromUtf8: ::std::option::Option<extern "C" fn
                                               (arg1: *const ::libc::c_char,
                                                arg2: uint32_t)
                                               -> Struct_PP_Var>,
    pub VarToUtf8: ::std::option::Option<extern "C" fn
                                             (arg1: Struct_PP_Var,
                                              arg2: *mut uint32_t)
                                             -> *const ::libc::c_char>,
    pub VarToResource: ::std::option::Option<extern "C" fn
                                                 (arg1: Struct_PP_Var)
                                                 -> PP_Resource>,
    pub VarFromResource: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource)
                                                   -> Struct_PP_Var>,
}
pub type PPB_Var = Struct_PPB_Var_1_2;
#[repr(C)]
pub struct Struct_PPB_Var_1_0 {
    pub AddRef: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub Release: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub VarFromUtf8: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Module,
                                                arg2: *const ::libc::c_char,
                                                arg3: uint32_t)
                                               -> Struct_PP_Var>,
    pub VarToUtf8: ::std::option::Option<extern "C" fn
                                             (arg1: Struct_PP_Var,
                                              arg2: *mut uint32_t)
                                             -> *const ::libc::c_char>,
}
#[repr(C)]
pub struct Struct_PPB_Var_1_1 {
    pub AddRef: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub Release: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
    pub VarFromUtf8: ::std::option::Option<extern "C" fn
                                               (arg1: *const ::libc::c_char,
                                                arg2: uint32_t)
                                               -> Struct_PP_Var>,
    pub VarToUtf8: ::std::option::Option<extern "C" fn
                                             (arg1: Struct_PP_Var,
                                              arg2: *mut uint32_t)
                                             -> *const ::libc::c_char>,
}
#[repr(C)]
pub struct Struct_PPB_VarArray_1_0 {
    pub Create: ::std::option::Option<extern "C" fn() -> Struct_PP_Var>,
    pub Get: ::std::option::Option<extern "C" fn
                                       (arg1: Struct_PP_Var, arg2: uint32_t)
                                       -> Struct_PP_Var>,
    pub Set: ::std::option::Option<extern "C" fn
                                       (arg1: Struct_PP_Var, arg2: uint32_t,
                                        arg3: Struct_PP_Var) -> PP_Bool>,
    pub GetLength: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)
                                             -> uint32_t>,
    pub SetLength: ::std::option::Option<extern "C" fn
                                             (arg1: Struct_PP_Var,
                                              arg2: uint32_t) -> PP_Bool>,
}
pub type PPB_VarArray = Struct_PPB_VarArray_1_0;
#[repr(C)]
pub struct Struct_PPB_VarArrayBuffer_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: uint32_t)
                                          -> Struct_PP_Var>,
    pub ByteLength: ::std::option::Option<extern "C" fn
                                              (arg1: Struct_PP_Var,
                                               arg2: *mut uint32_t)
                                              -> PP_Bool>,
    pub Map: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)
                                       -> *mut ::libc::c_void>,
    pub Unmap: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)>,
}
pub type PPB_VarArrayBuffer = Struct_PPB_VarArrayBuffer_1_0;
#[repr(C)]
pub struct Struct_PPB_VarDictionary_1_0 {
    pub Create: ::std::option::Option<extern "C" fn() -> Struct_PP_Var>,
    pub Get: ::std::option::Option<extern "C" fn
                                       (arg1: Struct_PP_Var,
                                        arg2: Struct_PP_Var)
                                       -> Struct_PP_Var>,
    pub Set: ::std::option::Option<extern "C" fn
                                       (arg1: Struct_PP_Var,
                                        arg2: Struct_PP_Var,
                                        arg3: Struct_PP_Var) -> PP_Bool>,
    pub Delete: ::std::option::Option<extern "C" fn
                                          (arg1: Struct_PP_Var,
                                           arg2: Struct_PP_Var)>,
    pub HasKey: ::std::option::Option<extern "C" fn
                                          (arg1: Struct_PP_Var,
                                           arg2: Struct_PP_Var) -> PP_Bool>,
    pub GetKeys: ::std::option::Option<extern "C" fn(arg1: Struct_PP_Var)
                                           -> Struct_PP_Var>,
}
pub type PPB_VarDictionary = Struct_PPB_VarDictionary_1_0;
#[repr(C)]
pub struct Struct_PPB_View_1_2 {
    pub IsView: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                          -> PP_Bool>,
    pub GetRect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: *mut Struct_PP_Rect)
                                           -> PP_Bool>,
    pub IsFullscreen: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub IsVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub IsPageVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetClipRect: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: *mut Struct_PP_Rect)
                                               -> PP_Bool>,
    pub GetDeviceScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> ::libc::c_float>,
    pub GetCSSScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> ::libc::c_float>,
    pub GetScrollOffset: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Resource,
                                                    arg2:
                                                        *mut Struct_PP_Point)
                                                   -> PP_Bool>,
}
#[repr(C)]
pub struct Struct_PPB_View_1_0 {
    pub IsView: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                          -> PP_Bool>,
    pub GetRect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: *mut Struct_PP_Rect)
                                           -> PP_Bool>,
    pub IsFullscreen: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub IsVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub IsPageVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetClipRect: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: *mut Struct_PP_Rect)
                                               -> PP_Bool>,
}
#[repr(C)]
pub struct Struct_PPB_View_1_1 {
    pub IsView: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                          -> PP_Bool>,
    pub GetRect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: *mut Struct_PP_Rect)
                                           -> PP_Bool>,
    pub IsFullscreen: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> PP_Bool>,
    pub IsVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                             -> PP_Bool>,
    pub IsPageVisible: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub GetClipRect: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: *mut Struct_PP_Rect)
                                               -> PP_Bool>,
    pub GetDeviceScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> ::libc::c_float>,
    pub GetCSSScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> ::libc::c_float>,
}
pub type PPB_View = Struct_PPB_View_1_1;
pub type PP_WebSocketReadyState = ::libc::c_int;
pub const PP_WEBSOCKETREADYSTATE_INVALID: ::libc::c_int = -1;
pub const PP_WEBSOCKETREADYSTATE_CONNECTING: ::libc::c_int = 0;
pub const PP_WEBSOCKETREADYSTATE_OPEN: ::libc::c_int = 1;
pub const PP_WEBSOCKETREADYSTATE_CLOSING: ::libc::c_int = 2;
pub const PP_WEBSOCKETREADYSTATE_CLOSED: ::libc::c_int = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_WebSocketReadyState {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_WebSocketReadyState_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_WebSocketCloseCode = ::libc::c_uint;
pub const PP_WEBSOCKETSTATUSCODE_NOT_SPECIFIED: ::libc::c_uint = 1005;
pub const PP_WEBSOCKETSTATUSCODE_NORMAL_CLOSURE: ::libc::c_uint = 1000;
pub const PP_WEBSOCKETSTATUSCODE_GOING_AWAY: ::libc::c_uint = 1001;
pub const PP_WEBSOCKETSTATUSCODE_PROTOCOL_ERROR: ::libc::c_uint = 1002;
pub const PP_WEBSOCKETSTATUSCODE_UNSUPPORTED_DATA: ::libc::c_uint = 1003;
pub const PP_WEBSOCKETSTATUSCODE_NO_STATUS_RECEIVED: ::libc::c_uint = 1005;
pub const PP_WEBSOCKETSTATUSCODE_ABNORMAL_CLOSURE: ::libc::c_uint = 1006;
pub const PP_WEBSOCKETSTATUSCODE_INVALID_FRAME_PAYLOAD_DATA: ::libc::c_uint =
    1007;
pub const PP_WEBSOCKETSTATUSCODE_POLICY_VIOLATION: ::libc::c_uint = 1008;
pub const PP_WEBSOCKETSTATUSCODE_MESSAGE_TOO_BIG: ::libc::c_uint = 1009;
pub const PP_WEBSOCKETSTATUSCODE_MANDATORY_EXTENSION: ::libc::c_uint = 1010;
pub const PP_WEBSOCKETSTATUSCODE_INTERNAL_SERVER_ERROR: ::libc::c_uint =
    1011;
pub const PP_WEBSOCKETSTATUSCODE_TLS_HANDSHAKE: ::libc::c_uint = 1015;
pub const PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MIN: ::libc::c_uint = 3000;
pub const PP_WEBSOCKETSTATUSCODE_USER_REGISTERED_MAX: ::libc::c_uint = 3999;
pub const PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MIN: ::libc::c_uint = 4000;
pub const PP_WEBSOCKETSTATUSCODE_USER_PRIVATE_MAX: ::libc::c_uint = 4999;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_WebSocketCloseCode {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_WebSocketCloseCode_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_WebSocket_1_0 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub IsWebSocket: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> PP_Bool>,
    pub Connect: ::std::option::Option<extern "C" fn
                                           (arg1: PP_Resource,
                                            arg2: Struct_PP_Var,
                                            arg3: *const Struct_PP_Var,
                                            arg4: uint32_t,
                                            arg5:
                                                Struct_PP_CompletionCallback)
                                           -> int32_t>,
    pub Close: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Resource, arg2: uint16_t,
                                          arg3: Struct_PP_Var,
                                          arg4: Struct_PP_CompletionCallback)
                                         -> int32_t>,
    pub ReceiveMessage: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: *mut Struct_PP_Var,
                                                   arg3:
                                                       Struct_PP_CompletionCallback)
                                                  -> int32_t>,
    pub SendMessage: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2: Struct_PP_Var)
                                               -> int32_t>,
    pub GetBufferedAmount: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> uint64_t>,
    pub GetCloseCode: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                -> uint16_t>,
    pub GetCloseReason: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> Struct_PP_Var>,
    pub GetCloseWasClean: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Resource)
                                                    -> PP_Bool>,
    pub GetExtensions: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> Struct_PP_Var>,
    pub GetProtocol: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> Struct_PP_Var>,
    pub GetReadyState: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_WebSocketReadyState>,
    pub GetURL: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                          -> Struct_PP_Var>,
}
pub type PPB_WebSocket = Struct_PPB_WebSocket_1_0;
#[repr(C)]
pub struct Struct_PP_DirectoryEntry {
    pub file_ref: PP_Resource,
    pub file_type: PP_FileType,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_DirectoryEntry {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_DirectoryEntry_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
pub type Enum_Unnamed6 = ::libc::c_int;
pub const PP_OK: ::libc::c_int = 0;
pub const PP_OK_COMPLETIONPENDING: ::libc::c_int = -1;
pub const PP_ERROR_FAILED: ::libc::c_int = -2;
pub const PP_ERROR_ABORTED: ::libc::c_int = -3;
pub const PP_ERROR_BADARGUMENT: ::libc::c_int = -4;
pub const PP_ERROR_BADRESOURCE: ::libc::c_int = -5;
pub const PP_ERROR_NOINTERFACE: ::libc::c_int = -6;
pub const PP_ERROR_NOACCESS: ::libc::c_int = -7;
pub const PP_ERROR_NOMEMORY: ::libc::c_int = -8;
pub const PP_ERROR_NOSPACE: ::libc::c_int = -9;
pub const PP_ERROR_NOQUOTA: ::libc::c_int = -10;
pub const PP_ERROR_INPROGRESS: ::libc::c_int = -11;
pub const PP_ERROR_NOTSUPPORTED: ::libc::c_int = -12;
pub const PP_ERROR_BLOCKS_MAIN_THREAD: ::libc::c_int = -13;
pub const PP_ERROR_MALFORMED_INPUT: ::libc::c_int = -14;
pub const PP_ERROR_RESOURCE_FAILED: ::libc::c_int = -15;
pub const PP_ERROR_FILENOTFOUND: ::libc::c_int = -20;
pub const PP_ERROR_FILEEXISTS: ::libc::c_int = -21;
pub const PP_ERROR_FILETOOBIG: ::libc::c_int = -22;
pub const PP_ERROR_FILECHANGED: ::libc::c_int = -23;
pub const PP_ERROR_NOTAFILE: ::libc::c_int = -24;
pub const PP_ERROR_TIMEDOUT: ::libc::c_int = -30;
pub const PP_ERROR_USERCANCEL: ::libc::c_int = -40;
pub const PP_ERROR_NO_USER_GESTURE: ::libc::c_int = -41;
pub const PP_ERROR_CONTEXT_LOST: ::libc::c_int = -50;
pub const PP_ERROR_NO_MESSAGE_LOOP: ::libc::c_int = -51;
pub const PP_ERROR_WRONG_THREAD: ::libc::c_int = -52;
pub const PP_ERROR_CONNECTION_CLOSED: ::libc::c_int = -100;
pub const PP_ERROR_CONNECTION_RESET: ::libc::c_int = -101;
pub const PP_ERROR_CONNECTION_REFUSED: ::libc::c_int = -102;
pub const PP_ERROR_CONNECTION_ABORTED: ::libc::c_int = -103;
pub const PP_ERROR_CONNECTION_FAILED: ::libc::c_int = -104;
pub const PP_ERROR_CONNECTION_TIMEDOUT: ::libc::c_int = -105;
pub const PP_ERROR_ADDRESS_INVALID: ::libc::c_int = -106;
pub const PP_ERROR_ADDRESS_UNREACHABLE: ::libc::c_int = -107;
pub const PP_ERROR_ADDRESS_IN_USE: ::libc::c_int = -108;
pub const PP_ERROR_MESSAGE_TOO_BIG: ::libc::c_int = -109;
pub const PP_ERROR_NAME_NOT_RESOLVED: ::libc::c_int = -110;
#[repr(C)]
pub struct Struct_PP_InputEvent_Key {
    pub modifier: uint32_t,
    pub key_code: uint32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Key {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Key_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_InputEvent_Character {
    pub modifier: uint32_t,
    pub text: [::libc::c_char, ..5u],
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Character {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Character_is_not_12_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_InputEvent_Mouse {
    pub modifier: uint32_t,
    pub button: PP_InputEvent_MouseButton,
    pub x: ::libc::c_float,
    pub y: ::libc::c_float,
    pub click_count: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Mouse {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Mouse_is_not_20_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_InputEvent_Wheel {
    pub modifier: uint32_t,
    pub delta_x: ::libc::c_float,
    pub delta_y: ::libc::c_float,
    pub wheel_ticks_x: ::libc::c_float,
    pub wheel_ticks_y: ::libc::c_float,
    pub scroll_by_page: PP_Bool,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_InputEvent_Wheel {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_InputEvent_Wheel_is_not_24_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPP_Graphics3D_1_0 {
    pub Graphics3DContextLost: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance)>,
}
pub type PPP_Graphics3D = Struct_PPP_Graphics3D_1_0;
#[repr(C)]
pub struct Struct_PPP_InputEvent_0_1 {
    pub HandleInputEvent: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Instance,
                                                     arg2: PP_Resource)
                                                    -> PP_Bool>,
}
pub type PPP_InputEvent = Struct_PPP_InputEvent_0_1;
#[repr(C)]
pub struct Struct_PPP_Instance_1_1 {
    pub DidCreate: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Instance,
                                              arg2: uint32_t,
                                              arg3:
                                                  *mut *const ::libc::c_char,
                                              arg4:
                                                  *mut *const ::libc::c_char)
                                             -> PP_Bool>,
    pub DidDestroy: ::std::option::Option<extern "C" fn(arg1: PP_Instance)>,
    pub DidChangeView: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: PP_Resource)>,
    pub DidChangeFocus: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Instance,
                                                   arg2: PP_Bool)>,
    pub HandleDocumentLoad: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Instance,
                                                       arg2: PP_Resource)
                                                      -> PP_Bool>,
}
pub type PPP_Instance = Struct_PPP_Instance_1_1;
#[repr(C)]
pub struct Struct_PPP_Instance_1_0 {
    pub DidCreate: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Instance,
                                              arg2: uint32_t,
                                              arg3:
                                                  *mut *const ::libc::c_char,
                                              arg4:
                                                  *mut *const ::libc::c_char)
                                             -> PP_Bool>,
    pub DidDestroy: ::std::option::Option<extern "C" fn(arg1: PP_Instance)>,
    pub DidChangeView: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: *const Struct_PP_Rect,
                                                  arg3:
                                                      *const Struct_PP_Rect)>,
    pub DidChangeFocus: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Instance,
                                                   arg2: PP_Bool)>,
    pub HandleDocumentLoad: ::std::option::Option<extern "C" fn
                                                      (arg1: PP_Instance,
                                                       arg2: PP_Resource)
                                                      -> PP_Bool>,
}
#[repr(C)]
pub struct Struct_PPP_Messaging_1_0 {
    pub HandleMessage: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance,
                                                  arg2: Struct_PP_Var)>,
}
pub type PPP_Messaging = Struct_PPP_Messaging_1_0;
#[repr(C)]
pub struct Struct_PPP_MouseLock_1_0 {
    pub MouseLockLost: ::std::option::Option<extern "C" fn
                                                 (arg1: PP_Instance)>,
}
pub type PPP_MouseLock = Struct_PPP_MouseLock_1_0;
pub type Enum_PP_CursorType_Dev = ::libc::c_int;
pub const PP_CURSORTYPE_CUSTOM: ::libc::c_int = -1;
pub const PP_CURSORTYPE_POINTER: ::libc::c_int = 0;
pub const PP_CURSORTYPE_CROSS: ::libc::c_int = 1;
pub const PP_CURSORTYPE_HAND: ::libc::c_int = 2;
pub const PP_CURSORTYPE_IBEAM: ::libc::c_int = 3;
pub const PP_CURSORTYPE_WAIT: ::libc::c_int = 4;
pub const PP_CURSORTYPE_HELP: ::libc::c_int = 5;
pub const PP_CURSORTYPE_EASTRESIZE: ::libc::c_int = 6;
pub const PP_CURSORTYPE_NORTHRESIZE: ::libc::c_int = 7;
pub const PP_CURSORTYPE_NORTHEASTRESIZE: ::libc::c_int = 8;
pub const PP_CURSORTYPE_NORTHWESTRESIZE: ::libc::c_int = 9;
pub const PP_CURSORTYPE_SOUTHRESIZE: ::libc::c_int = 10;
pub const PP_CURSORTYPE_SOUTHEASTRESIZE: ::libc::c_int = 11;
pub const PP_CURSORTYPE_SOUTHWESTRESIZE: ::libc::c_int = 12;
pub const PP_CURSORTYPE_WESTRESIZE: ::libc::c_int = 13;
pub const PP_CURSORTYPE_NORTHSOUTHRESIZE: ::libc::c_int = 14;
pub const PP_CURSORTYPE_EASTWESTRESIZE: ::libc::c_int = 15;
pub const PP_CURSORTYPE_NORTHEASTSOUTHWESTRESIZE: ::libc::c_int = 16;
pub const PP_CURSORTYPE_NORTHWESTSOUTHEASTRESIZE: ::libc::c_int = 17;
pub const PP_CURSORTYPE_COLUMNRESIZE: ::libc::c_int = 18;
pub const PP_CURSORTYPE_ROWRESIZE: ::libc::c_int = 19;
pub const PP_CURSORTYPE_MIDDLEPANNING: ::libc::c_int = 20;
pub const PP_CURSORTYPE_EASTPANNING: ::libc::c_int = 21;
pub const PP_CURSORTYPE_NORTHPANNING: ::libc::c_int = 22;
pub const PP_CURSORTYPE_NORTHEASTPANNING: ::libc::c_int = 23;
pub const PP_CURSORTYPE_NORTHWESTPANNING: ::libc::c_int = 24;
pub const PP_CURSORTYPE_SOUTHPANNING: ::libc::c_int = 25;
pub const PP_CURSORTYPE_SOUTHEASTPANNING: ::libc::c_int = 26;
pub const PP_CURSORTYPE_SOUTHWESTPANNING: ::libc::c_int = 27;
pub const PP_CURSORTYPE_WESTPANNING: ::libc::c_int = 28;
pub const PP_CURSORTYPE_MOVE: ::libc::c_int = 29;
pub const PP_CURSORTYPE_VERTICALTEXT: ::libc::c_int = 30;
pub const PP_CURSORTYPE_CELL: ::libc::c_int = 31;
pub const PP_CURSORTYPE_CONTEXTMENU: ::libc::c_int = 32;
pub const PP_CURSORTYPE_ALIAS: ::libc::c_int = 33;
pub const PP_CURSORTYPE_PROGRESS: ::libc::c_int = 34;
pub const PP_CURSORTYPE_NODROP: ::libc::c_int = 35;
pub const PP_CURSORTYPE_COPY: ::libc::c_int = 36;
pub const PP_CURSORTYPE_NONE: ::libc::c_int = 37;
pub const PP_CURSORTYPE_NOTALLOWED: ::libc::c_int = 38;
pub const PP_CURSORTYPE_ZOOMIN: ::libc::c_int = 39;
pub const PP_CURSORTYPE_ZOOMOUT: ::libc::c_int = 40;
pub const PP_CURSORTYPE_GRAB: ::libc::c_int = 41;
pub const PP_CURSORTYPE_GRABBING: ::libc::c_int = 42;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_CursorType_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_CursorType_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_CursorControl_Dev_0_4 {
    pub SetCursor: ::std::option::Option<extern "C" fn
                                             (arg1: PP_Instance,
                                              arg2: Enum_PP_CursorType_Dev,
                                              arg3: PP_Resource,
                                              arg4: *const Struct_PP_Point)
                                             -> PP_Bool>,
    pub LockCursor: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                              -> PP_Bool>,
    pub UnlockCursor: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                                -> PP_Bool>,
    pub HasCursorLock: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                                 -> PP_Bool>,
    pub CanLockCursor: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                                 -> PP_Bool>,
}
pub type PPB_CursorControl_Dev = Struct_PPB_CursorControl_Dev_0_4;
pub type PP_FileChooserMode_Dev = ::libc::c_uint;
pub const PP_FILECHOOSERMODE_OPEN: ::libc::c_uint = 0;
pub const PP_FILECHOOSERMODE_OPENMULTIPLE: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FileChooserMode_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FileChooserMode_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_FileChooser_Dev_0_6 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_FileChooserMode_Dev,
                                           arg3: Struct_PP_Var)
                                          -> PP_Resource>,
    pub IsFileChooser: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub Show: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource,
                                         arg2: Struct_PP_ArrayOutput,
                                         arg3: Struct_PP_CompletionCallback)
                                        -> int32_t>,
}
pub type PPB_FileChooser_Dev = Struct_PPB_FileChooser_Dev_0_6;
#[repr(C)]
pub struct Struct_PPB_FileChooser_Dev_0_5 {
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2: PP_FileChooserMode_Dev,
                                           arg3: Struct_PP_Var)
                                          -> PP_Resource>,
    pub IsFileChooser: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                 -> PP_Bool>,
    pub Show: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Resource,
                                         arg2: Struct_PP_CompletionCallback)
                                        -> int32_t>,
    pub GetNextChosenFile: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Resource)
                                                     -> PP_Resource>,
}
pub type PP_FontFamily_Dev = ::libc::c_uint;
pub const PP_FONTFAMILY_DEFAULT: ::libc::c_uint = 0;
pub const PP_FONTFAMILY_SERIF: ::libc::c_uint = 1;
pub const PP_FONTFAMILY_SANSSERIF: ::libc::c_uint = 2;
pub const PP_FONTFAMILY_MONOSPACE: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FontFamily_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FontFamily_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_FontWeight_Dev = ::libc::c_uint;
pub const PP_FONTWEIGHT_100: ::libc::c_uint = 0;
pub const PP_FONTWEIGHT_200: ::libc::c_uint = 1;
pub const PP_FONTWEIGHT_300: ::libc::c_uint = 2;
pub const PP_FONTWEIGHT_400: ::libc::c_uint = 3;
pub const PP_FONTWEIGHT_500: ::libc::c_uint = 4;
pub const PP_FONTWEIGHT_600: ::libc::c_uint = 5;
pub const PP_FONTWEIGHT_700: ::libc::c_uint = 6;
pub const PP_FONTWEIGHT_800: ::libc::c_uint = 7;
pub const PP_FONTWEIGHT_900: ::libc::c_uint = 8;
pub const PP_FONTWEIGHT_NORMAL: ::libc::c_uint = 3;
pub const PP_FONTWEIGHT_BOLD: ::libc::c_uint = 6;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FontWeight_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FontWeight_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FontDescription_Dev {
    pub face: Struct_PP_Var,
    pub family: PP_FontFamily_Dev,
    pub size: uint32_t,
    pub weight: PP_FontWeight_Dev,
    pub italic: PP_Bool,
    pub small_caps: PP_Bool,
    pub letter_spacing: int32_t,
    pub word_spacing: int32_t,
    pub padding: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FontDescription_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FontDescription_Dev_is_not_48_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_FontMetrics_Dev {
    pub height: int32_t,
    pub ascent: int32_t,
    pub descent: int32_t,
    pub line_spacing: int32_t,
    pub x_height: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_FontMetrics_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_FontMetrics_Dev_is_not_20_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_TextRun_Dev {
    pub text: Struct_PP_Var,
    pub rtl: PP_Bool,
    pub override_direction: PP_Bool,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TextRun_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TextRun_Dev_is_not_24_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_Font_Dev_0_6 {
    pub GetFontFamilies: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Instance)
                                                   -> Struct_PP_Var>,
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2:
                                               *const Struct_PP_FontDescription_Dev)
                                          -> PP_Resource>,
    pub IsFont: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                          -> PP_Bool>,
    pub Describe: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2:
                                                 *mut Struct_PP_FontDescription_Dev,
                                             arg3:
                                                 *mut Struct_PP_FontMetrics_Dev)
                                            -> PP_Bool>,
    pub DrawTextAt: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Resource,
                                               arg2: PP_Resource,
                                               arg3:
                                                   *const Struct_PP_TextRun_Dev,
                                               arg4: *const Struct_PP_Point,
                                               arg5: uint32_t,
                                               arg6: *const Struct_PP_Rect,
                                               arg7: PP_Bool) -> PP_Bool>,
    pub MeasureText: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Resource,
                                                arg2:
                                                    *const Struct_PP_TextRun_Dev)
                                               -> int32_t>,
    pub CharacterOffsetForPixel: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2:
                                                                *const Struct_PP_TextRun_Dev,
                                                            arg3: int32_t)
                                                           -> uint32_t>,
    pub PixelOffsetForCharacter: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2:
                                                                *const Struct_PP_TextRun_Dev,
                                                            arg3: uint32_t)
                                                           -> int32_t>,
}
pub type PPB_Font_Dev = Struct_PPB_Font_Dev_0_6;
#[repr(C)]
pub struct Struct_PPB_Memory_Dev_0_1 {
    pub MemAlloc: ::std::option::Option<extern "C" fn(arg1: uint32_t)
                                            -> *mut ::libc::c_void>,
    pub MemFree: ::std::option::Option<extern "C" fn
                                           (arg1: *mut ::libc::c_void)>,
}
pub type PPB_Memory_Dev = Struct_PPB_Memory_Dev_0_1;
#[repr(C)]
pub struct Struct_PPB_OpenGLES2DrawBuffers_Dev {
    pub DrawBuffersEXT: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Resource,
                                                   arg2: GLsizei,
                                                   arg3: *const GLenum)>,
}
pub type PP_PrintOrientation_Dev = ::libc::c_uint;
pub const PP_PRINTORIENTATION_NORMAL: ::libc::c_uint = 0;
pub const PP_PRINTORIENTATION_ROTATED_90_CW: ::libc::c_uint = 1;
pub const PP_PRINTORIENTATION_ROTATED_180: ::libc::c_uint = 2;
pub const PP_PRINTORIENTATION_ROTATED_90_CCW: ::libc::c_uint = 3;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_PrintOrientation_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_PrintOrientation_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_PrintOutputFormat_Dev = ::libc::c_uint;
pub const PP_PRINTOUTPUTFORMAT_RASTER: ::libc::c_uint = 1;
pub const PP_PRINTOUTPUTFORMAT_PDF: ::libc::c_uint = 2;
pub const PP_PRINTOUTPUTFORMAT_POSTSCRIPT: ::libc::c_uint = 4;
pub const PP_PRINTOUTPUTFORMAT_EMF: ::libc::c_uint = 8;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_PrintOutputFormat_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_PrintOutputFormat_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_PrintScalingOption_Dev = ::libc::c_uint;
pub const PP_PRINTSCALINGOPTION_NONE: ::libc::c_uint = 0;
pub const PP_PRINTSCALINGOPTION_FIT_TO_PRINTABLE_AREA: ::libc::c_uint = 1;
pub const PP_PRINTSCALINGOPTION_SOURCE_SIZE: ::libc::c_uint = 2;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_PrintScalingOption_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_PrintScalingOption_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_PrintSettings_Dev {
    pub printable_area: Struct_PP_Rect,
    pub content_area: Struct_PP_Rect,
    pub paper_size: Struct_PP_Size,
    pub dpi: int32_t,
    pub orientation: PP_PrintOrientation_Dev,
    pub print_scaling_option: PP_PrintScalingOption_Dev,
    pub grayscale: PP_Bool,
    pub format: PP_PrintOutputFormat_Dev,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_PrintSettings_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_PrintSettings_Dev_is_not_60_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_Printing_Dev_0_7 {
    pub Create: ::std::option::Option<extern "C" fn(arg1: PP_Instance)
                                          -> PP_Resource>,
    pub GetDefaultPrintSettings: ::std::option::Option<extern "C" fn
                                                           (arg1: PP_Resource,
                                                            arg2:
                                                                *mut Struct_PP_PrintSettings_Dev,
                                                            arg3:
                                                                Struct_PP_CompletionCallback)
                                                           -> int32_t>,
}
pub type PPB_Printing_Dev = Struct_PPB_Printing_Dev_0_7;
pub type PP_TraceEventTime = int64_t;
#[repr(C)]
pub struct Struct_PPB_Trace_Event_Dev_0_2 {
    pub GetCategoryEnabled: ::std::option::Option<extern "C" fn
                                                      (arg1:
                                                           *const ::libc::c_char)
                                                      -> *mut ::libc::c_void>,
    pub AddTraceEvent: ::std::option::Option<extern "C" fn
                                                 (arg1: int8_t,
                                                  arg2: *const ::libc::c_void,
                                                  arg3: *const ::libc::c_char,
                                                  arg4: uint64_t,
                                                  arg5: uint32_t,
                                                  arg6:
                                                      *mut *const ::libc::c_char,
                                                  arg7: *const uint8_t,
                                                  arg8: *const uint64_t,
                                                  arg9: uint8_t)>,
    pub AddTraceEventWithThreadIdAndTimestamp: ::std::option::Option<extern "C" fn
                                                                         (arg1:
                                                                              int8_t,
                                                                          arg2:
                                                                              *const ::libc::c_void,
                                                                          arg3:
                                                                              *const ::libc::c_char,
                                                                          arg4:
                                                                              uint64_t,
                                                                          arg5:
                                                                              int32_t,
                                                                          arg6:
                                                                              PP_TraceEventTime,
                                                                          arg7:
                                                                              uint32_t,
                                                                          arg8:
                                                                              *mut *const ::libc::c_char,
                                                                          arg9:
                                                                              *const uint8_t,
                                                                          arg10:
                                                                              *const uint64_t,
                                                                          arg11:
                                                                              uint8_t)>,
    pub Now: ::std::option::Option<extern "C" fn() -> PP_TraceEventTime>,
    pub SetThreadName: ::std::option::Option<extern "C" fn
                                                 (arg1:
                                                      *const ::libc::c_char)>,
}
pub type PPB_Trace_Event_Dev = Struct_PPB_Trace_Event_Dev_0_2;
#[repr(C)]
pub struct Struct_PPB_Trace_Event_Dev_0_1 {
    pub GetCategoryEnabled: ::std::option::Option<extern "C" fn
                                                      (arg1:
                                                           *const ::libc::c_char)
                                                      -> *mut ::libc::c_void>,
    pub AddTraceEvent: ::std::option::Option<extern "C" fn
                                                 (arg1: int8_t,
                                                  arg2: *const ::libc::c_void,
                                                  arg3: *const ::libc::c_char,
                                                  arg4: uint64_t,
                                                  arg5: uint32_t,
                                                  arg6:
                                                      *mut *const ::libc::c_char,
                                                  arg7: *const uint8_t,
                                                  arg8: *const uint64_t,
                                                  arg9: uint8_t)>,
    pub SetThreadName: ::std::option::Option<extern "C" fn
                                                 (arg1:
                                                      *const ::libc::c_char)>,
}
pub type PP_TrueTypeFontFamily_Dev = ::libc::c_uint;
pub const PP_TRUETYPEFONTFAMILY_SERIF: ::libc::c_uint = 0;
pub const PP_TRUETYPEFONTFAMILY_SANSSERIF: ::libc::c_uint = 1;
pub const PP_TRUETYPEFONTFAMILY_CURSIVE: ::libc::c_uint = 2;
pub const PP_TRUETYPEFONTFAMILY_FANTASY: ::libc::c_uint = 3;
pub const PP_TRUETYPEFONTFAMILY_MONOSPACE: ::libc::c_uint = 4;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontFamily_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontFamily_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TrueTypeFontStyle_Dev = ::libc::c_uint;
pub const PP_TRUETYPEFONTSTYLE_NORMAL: ::libc::c_uint = 0;
pub const PP_TRUETYPEFONTSTYLE_ITALIC: ::libc::c_uint = 1;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontStyle_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontStyle_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TrueTypeFontWeight_Dev = ::libc::c_uint;
pub const PP_TRUETYPEFONTWEIGHT_THIN: ::libc::c_uint = 100;
pub const PP_TRUETYPEFONTWEIGHT_ULTRALIGHT: ::libc::c_uint = 200;
pub const PP_TRUETYPEFONTWEIGHT_LIGHT: ::libc::c_uint = 300;
pub const PP_TRUETYPEFONTWEIGHT_NORMAL: ::libc::c_uint = 400;
pub const PP_TRUETYPEFONTWEIGHT_MEDIUM: ::libc::c_uint = 500;
pub const PP_TRUETYPEFONTWEIGHT_SEMIBOLD: ::libc::c_uint = 600;
pub const PP_TRUETYPEFONTWEIGHT_BOLD: ::libc::c_uint = 700;
pub const PP_TRUETYPEFONTWEIGHT_ULTRABOLD: ::libc::c_uint = 800;
pub const PP_TRUETYPEFONTWEIGHT_HEAVY: ::libc::c_uint = 900;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontWeight_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontWeight_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TrueTypeFontWidth_Dev = ::libc::c_uint;
pub const PP_TRUETYPEFONTWIDTH_ULTRACONDENSED: ::libc::c_uint = 0;
pub const PP_TRUETYPEFONTWIDTH_EXTRACONDENSED: ::libc::c_uint = 1;
pub const PP_TRUETYPEFONTWIDTH_CONDENSED: ::libc::c_uint = 2;
pub const PP_TRUETYPEFONTWIDTH_SEMICONDENSED: ::libc::c_uint = 3;
pub const PP_TRUETYPEFONTWIDTH_NORMAL: ::libc::c_uint = 4;
pub const PP_TRUETYPEFONTWIDTH_SEMIEXPANDED: ::libc::c_uint = 5;
pub const PP_TRUETYPEFONTWIDTH_EXPANDED: ::libc::c_uint = 6;
pub const PP_TRUETYPEFONTWIDTH_EXTRAEXPANDED: ::libc::c_uint = 7;
pub const PP_TRUETYPEFONTWIDTH_ULTRAEXPANDED: ::libc::c_uint = 8;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontWidth_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontWidth_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
pub type PP_TrueTypeFontCharset_Dev = ::libc::c_uint;
pub const PP_TRUETYPEFONTCHARSET_ANSI: ::libc::c_uint = 0;
pub const PP_TRUETYPEFONTCHARSET_DEFAULT: ::libc::c_uint = 1;
pub const PP_TRUETYPEFONTCHARSET_SYMBOL: ::libc::c_uint = 2;
pub const PP_TRUETYPEFONTCHARSET_MAC: ::libc::c_uint = 77;
pub const PP_TRUETYPEFONTCHARSET_SHIFTJIS: ::libc::c_uint = 128;
pub const PP_TRUETYPEFONTCHARSET_HANGUL: ::libc::c_uint = 129;
pub const PP_TRUETYPEFONTCHARSET_JOHAB: ::libc::c_uint = 130;
pub const PP_TRUETYPEFONTCHARSET_GB2312: ::libc::c_uint = 134;
pub const PP_TRUETYPEFONTCHARSET_CHINESEBIG5: ::libc::c_uint = 136;
pub const PP_TRUETYPEFONTCHARSET_GREEK: ::libc::c_uint = 161;
pub const PP_TRUETYPEFONTCHARSET_TURKISH: ::libc::c_uint = 162;
pub const PP_TRUETYPEFONTCHARSET_VIETNAMESE: ::libc::c_uint = 163;
pub const PP_TRUETYPEFONTCHARSET_HEBREW: ::libc::c_uint = 177;
pub const PP_TRUETYPEFONTCHARSET_ARABIC: ::libc::c_uint = 178;
pub const PP_TRUETYPEFONTCHARSET_BALTIC: ::libc::c_uint = 186;
pub const PP_TRUETYPEFONTCHARSET_RUSSIAN: ::libc::c_uint = 204;
pub const PP_TRUETYPEFONTCHARSET_THAI: ::libc::c_uint = 222;
pub const PP_TRUETYPEFONTCHARSET_EASTEUROPE: ::libc::c_uint = 238;
pub const PP_TRUETYPEFONTCHARSET_OEM: ::libc::c_uint = 255;
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontCharset_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontCharset_Dev_is_not_4_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PP_TrueTypeFontDesc_Dev {
    pub family: Struct_PP_Var,
    pub generic_family: PP_TrueTypeFontFamily_Dev,
    pub style: PP_TrueTypeFontStyle_Dev,
    pub weight: PP_TrueTypeFontWeight_Dev,
    pub width: PP_TrueTypeFontWidth_Dev,
    pub charset: PP_TrueTypeFontCharset_Dev,
    pub padding: int32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_TrueTypeFontDesc_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_TrueTypeFontDesc_Dev_is_not_40_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPB_TrueTypeFont_Dev_0_1 {
    pub GetFontFamilies: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Instance,
                                                    arg2:
                                                        Struct_PP_ArrayOutput,
                                                    arg3:
                                                        Struct_PP_CompletionCallback)
                                                   -> int32_t>,
    pub GetFontsInFamily: ::std::option::Option<extern "C" fn
                                                    (arg1: PP_Instance,
                                                     arg2: Struct_PP_Var,
                                                     arg3:
                                                         Struct_PP_ArrayOutput,
                                                     arg4:
                                                         Struct_PP_CompletionCallback)
                                                    -> int32_t>,
    pub Create: ::std::option::Option<extern "C" fn
                                          (arg1: PP_Instance,
                                           arg2:
                                               *const Struct_PP_TrueTypeFontDesc_Dev)
                                          -> PP_Resource>,
    pub IsTrueTypeFont: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> PP_Bool>,
    pub Describe: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2:
                                                 *mut Struct_PP_TrueTypeFontDesc_Dev,
                                             arg3:
                                                 Struct_PP_CompletionCallback)
                                            -> int32_t>,
    pub GetTableTags: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Resource,
                                                 arg2: Struct_PP_ArrayOutput,
                                                 arg3:
                                                     Struct_PP_CompletionCallback)
                                                -> int32_t>,
    pub GetTable: ::std::option::Option<extern "C" fn
                                            (arg1: PP_Resource,
                                             arg2: uint32_t, arg3: int32_t,
                                             arg4: int32_t,
                                             arg5: Struct_PP_ArrayOutput,
                                             arg6:
                                                 Struct_PP_CompletionCallback)
                                            -> int32_t>,
}
pub type PPB_TrueTypeFont_Dev = Struct_PPB_TrueTypeFont_Dev_0_1;
#[repr(C)]
pub struct Struct_PPB_View_Dev_0_1 {
    pub GetDeviceScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                                  -> ::libc::c_float>,
    pub GetCSSScale: ::std::option::Option<extern "C" fn(arg1: PP_Resource)
                                               -> ::libc::c_float>,
}
pub type PPB_View_Dev = Struct_PPB_View_Dev_0_1;
#[repr(C)]
pub struct Struct_PPB_Zoom_Dev_0_2 {
    pub ZoomChanged: ::std::option::Option<extern "C" fn
                                               (arg1: PP_Instance,
                                                arg2: ::libc::c_double)>,
    pub ZoomLimitsChanged: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Instance,
                                                      arg2: ::libc::c_double,
                                                      arg3:
                                                          ::libc::c_double)>,
}
pub type PPB_Zoom_Dev = Struct_PPB_Zoom_Dev_0_2;
#[repr(C)]
pub struct Struct_PPP_NetworkState_Dev_0_1 {
    pub SetOnLine: ::std::option::Option<extern "C" fn(arg1: PP_Bool)>,
}
pub type PPP_NetworkState_Dev = Struct_PPP_NetworkState_Dev_0_1;
#[repr(C)]
pub struct Struct_PP_PrintPageNumberRange_Dev {
    pub first_page_number: uint32_t,
    pub last_page_number: uint32_t,
}
#[repr(C)]
pub struct Struct_PP_Dummy_Struct_For_PP_PrintPageNumberRange_Dev {
    pub _COMPILE_ASSERT_FAILED_The_type_named_PP_PrintPageNumberRange_Dev_is_not_8_bytes_wide: [::libc::c_char, ..1u],
}
#[repr(C)]
pub struct Struct_PPP_Printing_Dev_0_6 {
    pub QuerySupportedFormats: ::std::option::Option<extern "C" fn
                                                         (arg1: PP_Instance)
                                                         -> uint32_t>,
    pub Begin: ::std::option::Option<extern "C" fn
                                         (arg1: PP_Instance,
                                          arg2:
                                              *const Struct_PP_PrintSettings_Dev)
                                         -> int32_t>,
    pub PrintPages: ::std::option::Option<extern "C" fn
                                              (arg1: PP_Instance,
                                               arg2:
                                                   *const Struct_PP_PrintPageNumberRange_Dev,
                                               arg3: uint32_t)
                                              -> PP_Resource>,
    pub End: ::std::option::Option<extern "C" fn(arg1: PP_Instance)>,
    pub IsScalingDisabled: ::std::option::Option<extern "C" fn
                                                     (arg1: PP_Instance)
                                                     -> PP_Bool>,
}
pub type PPP_Printing_Dev = Struct_PPP_Printing_Dev_0_6;
#[repr(C)]
pub struct Struct_PPP_Scrollbar_Dev_0_3 {
    pub ValueChanged: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Instance,
                                                 arg2: PP_Resource,
                                                 arg3: uint32_t)>,
    pub OverlayChanged: ::std::option::Option<extern "C" fn
                                                  (arg1: PP_Instance,
                                                   arg2: PP_Resource,
                                                   arg3: PP_Bool)>,
}
pub type PPP_Scrollbar_Dev = Struct_PPP_Scrollbar_Dev_0_3;
#[repr(C)]
pub struct Struct_PPP_Scrollbar_Dev_0_2 {
    pub ValueChanged: ::std::option::Option<extern "C" fn
                                                (arg1: PP_Instance,
                                                 arg2: PP_Resource,
                                                 arg3: uint32_t)>,
}
#[repr(C)]
pub struct Struct_PPP_Selection_Dev_0_3 {
    pub GetSelectedText: ::std::option::Option<extern "C" fn
                                                   (arg1: PP_Instance,
                                                    arg2: PP_Bool)
                                                   -> Struct_PP_Var>,
}
pub type PPP_Selection_Dev = Struct_PPP_Selection_Dev_0_3;
#[repr(C)]
pub struct Struct_PPP_TextInput_Dev_0_1 {
    pub RequestSurroundingText: ::std::option::Option<extern "C" fn
                                                          (arg1: PP_Instance,
                                                           arg2: uint32_t)>,
}
pub type PPP_TextInput_Dev = Struct_PPP_TextInput_Dev_0_1;
#[repr(C)]
pub struct Struct_PPP_Zoom_Dev_0_3 {
    pub Zoom: ::std::option::Option<extern "C" fn
                                        (arg1: PP_Instance,
                                         arg2: ::libc::c_double,
                                         arg3: PP_Bool)>,
}
pub type PPP_Zoom_Dev = Struct_PPP_Zoom_Dev_0_3;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type u_quad_t = __uint64_t;
pub type quad_t = __int64_t;
pub type qaddr_t = *mut quad_t;
pub type __off_t = ::libc::c_long;
pub type __pid_t = ::libc::c_int;
pub type __loff_t = ::libc::c_longlong;
pub type u_char = ::libc::c_uchar;
pub type u_short = ::libc::c_ushort;
pub type u_int = ::libc::c_uint;
pub type u_long = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type ulong = ::libc::c_ulong;
pub type clock_t = ::libc::c_ulong;
#[repr(C)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
pub type daddr_t = ::libc::c_long;
pub type caddr_t = *mut ::libc::c_char;
pub type ino_t = __ino_t;
pub type off_t = _off_t;
pub type dev_t = __dev_t;
pub type uid_t = __uid_t;
pub type gid_t = __gid_t;
pub type pid_t = ::libc::c_int;
pub type key_t = ::libc::c_long;
pub type ssize_t = _ssize_t;
pub type mode_t = ::libc::c_uint;
pub type nlink_t = __nlink_t;
pub type fd_mask = ::libc::c_long;
#[repr(C)]
pub struct Struct__types_fd_set {
    pub fds_bits: [fd_mask, ..2u],
}
pub type _types_fd_set = Struct__types_fd_set;
pub type clockid_t = ::libc::c_ulong;
pub type timer_t = ::libc::c_ulong;
pub type useconds_t = ::libc::c_ulong;
pub type suseconds_t = ::libc::c_long;
pub type nacl_io_exit_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg1: ::libc::c_int,
                               arg2: *mut ::libc::c_void)>;
pub type nacl_io_mount_callback_t =
    ::std::option::Option<extern "C" fn
                              (arg1: *const ::libc::c_char,
                               arg2: *const ::libc::c_char,
                               arg3: *const ::libc::c_char,
                               arg4: ::libc::c_ulong,
                               arg5: *const ::libc::c_void, arg6: dev_t,
                               arg7: *mut ::libc::c_void)>;
pub enum Struct_fuse_operations { }
extern "C" {
    pub fn nacl_io_init();
    pub fn nacl_io_init_ppapi(instance: PP_Instance,
                              get_interface: PPB_GetInterface);
    pub fn nacl_io_set_exit_callback(exit_callback: nacl_io_exit_callback_t,
                                     user_data: *mut ::libc::c_void);
    pub fn nacl_io_register_fs_type(fs_type: *const ::libc::c_char,
                                    fuse_ops: *mut Struct_fuse_operations) ->
     ::libc::c_int;
    pub fn nacl_io_unregister_fs_type(fs_type: *const ::libc::c_char) ->
     ::libc::c_int;
    pub fn nacl_io_set_mount_callback(callback: nacl_io_mount_callback_t,
                                      user_data: *mut ::libc::c_void);
    pub fn mount(source: *const ::libc::c_char, target: *const ::libc::c_char,
                 filesystemtype: *const ::libc::c_char,
                 mountflags: ::libc::c_ulong, data: *const ::libc::c_void) ->
     ::libc::c_int;
    pub fn umount(target: *const ::libc::c_char) -> ::libc::c_int;
    pub fn make_completion_callback(func: PP_CompletionCallback_Func,
                                    user_data: *mut ::libc::c_void) ->
     Struct_PP_CompletionCallback;
    pub fn run_completion_callback(func: Struct_PP_CompletionCallback,
                                   code: int32_t);
    pub fn make_undefined_var() -> Struct_PP_Var;
    pub fn make_null_var() -> Struct_PP_Var;
    pub fn bool_to_var(value: ::libc::c_int) -> Struct_PP_Var;
    pub fn bool_from_var(v: Struct_PP_Var) -> ::libc::c_int;
    pub fn i32_to_var(value: int32_t) -> Struct_PP_Var;
    pub fn i32_from_var(v: Struct_PP_Var) -> int32_t;
    pub fn f64_to_var(value: ::libc::c_double) -> Struct_PP_Var;
    pub fn f64_from_var(v: Struct_PP_Var) -> ::libc::c_double;
    pub fn string_id_to_var(id: int64_t) -> Struct_PP_Var;
    pub fn object_id_to_var(id: int64_t) -> Struct_PP_Var;
    pub fn array_id_to_var(id: int64_t) -> Struct_PP_Var;
    pub fn dictionary_id_to_var(id: int64_t) -> Struct_PP_Var;
    pub fn array_buffer_id_to_var(id: int64_t) -> Struct_PP_Var;
    pub fn id_from_var(v: Struct_PP_Var) -> int64_t;
}
pub type PP_Var = Struct_PP_Var;
pub type PP_Rect = Struct_PP_Rect;
pub type PP_Point = Struct_PP_Point;
pub type PP_FloatPoint = Struct_PP_FloatPoint;
pub type PP_TouchPoint = Struct_PP_TouchPoint;
pub type PP_Size = Struct_PP_Size;
pub type PPB_OpenGLES2 = Struct_PPB_OpenGLES2;
